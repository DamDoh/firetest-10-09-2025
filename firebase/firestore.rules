
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default-deny all access to prevent accidental exposure of new collections.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users can read their own profile and public profiles, but only update their own.
    match /users/{userId} {
      // Any authenticated user can read a profile
      allow read: if request.auth != null;
      // A user can only update their own profile document
      allow update: if request.auth != null && request.auth.uid == userId;
      // Profile creation is handled by the onUserCreate backend trigger.
      allow create: if false;
      allow delete: if false; // Deletion should be an admin action
    }

    // Publicly readable collections
    match /marketplaceItems/{itemId} {
      allow read: if request.auth != null;
      // Allow creation for any authenticated user
      allow create: if request.auth != null;
      // Allow updates/deletes only if the user is the seller
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.sellerId;
    }
    
    match /knowledge_articles/{articleId} {
      // Any authenticated user can read knowledge articles.
      allow read: if request.auth != null;
      // Writes are restricted to admin/curator functions (no custom claims yet, so keep locked)
      allow write: if false;
    }

    match /forums/{topicId} {
        allow read: if request.auth != null;
        allow write: if false; // Managed by functions
        
        match /posts/{postId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if request.auth.uid == resource.data.authorRef;
            
            match /replies/{replyId} {
                 allow read: if request.auth != null;
                 allow create: if request.auth != null;
                 allow update, delete: if request.auth.uid == resource.data.authorRef;
            }
        }
    }
    
     match /groups/{groupId} {
        allow read: if request.auth != null;
        allow write: if false; // Managed by functions
        
        match /posts/{postId} {
            allow read: if request.auth != null;
            // Only members can create posts (this rule is complex, handled by function)
            allow create: if false;
            allow update, delete: if request.auth.uid == resource.data.authorRef;
        }
    }

    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.userId;

      match /likes/{userId} {
        allow read: if request.auth != null;
        // A user can only like/unlike for themselves
        allow write: if request.auth.uid == userId;
      }
      match /comments/{commentId} {
         allow read: if request.auth != null;
         allow create: if request.auth.uid != null;
         allow update, delete: if request.auth.uid == resource.data.userId;
      }
       match /votes/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth.uid == userId;
      }
    }
    
     // Secure logs, only backend functions should write to these.
    match /profile_views/{viewId} {
      allow read, write: if false;
    }
    match /offline_changes_log/{logId} {
       allow read, write: if false;
    }
     match /traceability_events/{eventId} {
      allow read: if request.auth != null; // Allow clients to read for display
      allow write: if false; // All writes must go through secure cloud functions
    }
     match /vti_registry/{vtiId} {
      allow read: if true; // Publicly readable for QR code scans
      allow write: if false; // All writes must go through secure cloud functions
    }
    
  }
}
