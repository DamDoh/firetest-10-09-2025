
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user's ID matches a specific field in the document.
    // Works for get, update, delete operations on single documents.
    function isOwner(doc) {
      return request.auth.uid == doc.userId || request.auth.uid == doc.ownerId;
    }
    
    // Checks if the requesting user's ID is in a list of participant IDs.
    // Works for get, update, delete and even list operations.
    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }


    // ===================================
    //  Publicly Readable Collections
    // ===================================
    match /users/{userId} {
      allow get, list: if true;
      allow update: if isSignedIn() && request.auth.uid == userId;
      // Creation is handled by a Cloud Function (registerUser)
      allow create, delete: if false; 
    }
    
    match /marketplaceItems/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
      allow delete: if false; // Prefer soft deletes via a flag

      // Subcollections for services
      match /bookings/{bookingId} {
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Only owner of service or booker can read
        allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/marketplaceItems/$(itemId)).data.sellerId == request.auth.uid);
        // Owner can update (e.g. checkedIn status)
        allow update: if isSignedIn() && get(/databases/$(database)/documents/marketplaceItems/$(itemId)).data.sellerId == request.auth.uid;
      }
      match /staff/{staffId} {
        // Only owner can manage staff
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/marketplaceItems/$(itemId)).data.sellerId == request.auth.uid;
      }
    }
    
    match /forums/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      // Only admins/mods should update topics, not implemented yet
      allow update: if false; 
    }
    
    // Main Social Feed
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if isSignedIn() && request.auth.uid == userId;
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
      }
       match /votes/{userId} {
        // A user can only vote for themself, one time.
        // The check for "one time" happens in the cloud function transaction.
        allow read, create, delete: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // ===================================
    //  User-Scoped & Private Collections
    // ===================================

    // This pattern allows a client to securely query their own documents
    // from a root collection, e.g., db.collection('farms').where('ownerId', '==', uid).
    // `get` is secured by checking the field on the specific document.
    // `list` is only allowed for authenticated users, relying on the client query's `where` clause.
    match /farms/{farmId} {
      allow get, update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow list: if isSignedIn();
    }
    
    match /crops/{cropId} {
       allow get, update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
       allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
       allow list: if isSignedIn(); 
    }

    match /knf_batches/{batchId} {
       allow get, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow list: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
      allow get, update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn(); 
      allow create, delete: if false; // Created by backend functions only
    }
    
    match /users/{userId}/workers/{workerId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      
      match /work_logs/{logId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
      match /payments/{paymentId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // ===================================
    //  Complex Permissions Collections
    // ===================================

    match /conversations/{conversationId} {
      // User must be one of the participants to do anything.
      // The `list` query is secure because Firestore can check 'array-contains'.
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        // Can only access messages if you are a participant of the parent conversation
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
    
    match /marketplace_orders/{orderId} {
      allow create: if isSignedIn() && request.resource.data.buyerId == request.auth.uid;
      // Only buyer or seller can read or update
      allow read: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
    
    match /agri_events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.organizerId == request.auth.uid;

      match /coupons/{couponId} {
         allow read, write: if isSignedIn() && get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId == request.auth.uid;
      }
      match /attendees/{attendeeId} {
        allow create: if isSignedIn() && request.auth.uid == attendeeId;
        allow read, update: if isSignedIn() && (request.auth.uid == attendeeId || get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId == request.auth.uid);
      }
      match /staff/{staffId} {
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId == request.auth.uid;
      }
    }
    
     match /groups/{groupId} {
        allow read: if resource.data.isPublic == true || (isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)));
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      
        match /members/{memberId} {
          allow read: if get(/databases/$(database)/documents/groups/$(groupId)).data.isPublic == true || (isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)));
          allow write: if isSignedIn() && (request.auth.uid == memberId || get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId == request.auth.uid);
        }
      
        match /posts/{postId} {
          allow read, update, delete: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
          allow create: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) && request.resource.data.authorRef == request.auth.uid;
        
          match /replies/{replyId} {
            allow read: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
            allow create: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
          }
        }
    }

    match /connection_requests/{reqId} {
      allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid;
      allow read, update: if isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.recipientId == request.auth.uid);
    }
    
    match /financial_applications/{appId} {
      allow create: if isSignedIn() && request.resource.data.applicantId == request.auth.uid;
      allow read: if isSignedIn() && (resource.data.applicantId == request.auth.uid || resource.data.fiId == request.auth.uid);
      allow update: if isSignedIn() && resource.data.fiId == request.auth.uid;
    }

    // ===================================
    //  Backend-Managed Collections
    // ===================================
    match /profile_views/{viewId} {
      allow create: if isSignedIn() && request.resource.data.viewerId == request.auth.uid;
      allow read, update, delete: if false;
    }
    
    match /traceability_events/{eventId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /vti_registry/{vtiId} {
      allow read: if true;
      allow write: if false;
    }

    match /search_index/{docId} {
      allow read, write: if false;
    }
    
    match /offline_changes_log/{changeId} {
      allow read, write: if false;
    }
    
    match /recovery_sessions/{sessionId} {
      allow read, write: if false; // Handled by secure cloud functions
    }
  }
}

    