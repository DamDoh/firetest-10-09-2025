
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read public profiles but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Allow users to read and write to their own subcollections.
    match /users/{userId}/{collectionId}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Only authenticated users can create new shops.
    // Only the owner of a shop can update or delete it.
    match /shops/{shopId} {
        allow read: if true; // Publicly readable
        allow create: if request.auth != null;
        allow update, delete: if resource.data.ownerId == request.auth.uid;
    }

    // Marketplace items are publicly readable.
    // Only authenticated users can create new listings.
    // Only the seller can update or delete their own listings.
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if resource.data.sellerId == request.auth.uid;
    }
    
    // Subcollections under marketplaceItems (e.g., bookings, staff)
    match /marketplaceItems/{itemId}/{collectionId}/{docId} {
       allow read, create, update, delete: if request.auth != null; // Basic auth check, can be refined
    }

    // Authenticated users can place orders.
    // Only the buyer or seller can view or update an order.
    match /marketplace_orders/{orderId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId;
    }
    
    // Marketplace coupons can be read publicly (to validate)
    // Only the seller can create/update their own coupons.
    match /marketplace_coupons/{couponId} {
        allow read: if true;
        allow create, update, delete: if request.auth.uid == request.resource.data.sellerId || (resource != null && request.auth.uid == resource.data.sellerId);
    }
    
    // Agri-events are public. Only authenticated users can create them.
    // Only the organizer can update or delete them.
    match /agri_events/{eventId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if resource.data.organizerId == request.auth.uid;
    }
    
    // Authenticated users can register for events.
    // The organizer can manage attendees, staff, and coupons.
    match /agri_events/{eventId}/{collectionId}/{docId} {
        allow read, create, update, delete: if request.auth != null;
    }

    // Farm data is private to the owner.
    match /farms/{farmId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }

    // Crop data is private to the owner.
    match /crops/{cropId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }

    // KNF batches are private to the user.
    match /knf_batches/{batchId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Financial transactions are private to the user.
    match /financial_transactions/{txId} {
        allow read, write: if request.auth.uid == resource.data.userRef.id;
    }
    
    // Financial applications are readable by the applicant and the FI.
    match /financial_applications/{appId} {
        allow create: if request.auth != null;
        allow read, update: if request.auth.uid == resource.data.applicantId || request.auth.uid == resource.data.fiId;
    }
    
    // Financial products are public.
    match /financial_products/{productId} {
        allow read: if true;
        allow create, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Financial Institution (Micro-finance/Loans)';
    }

    // Forums are public, but only authenticated users can post.
    match /forums/{topicId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if resource.data.creatorId == request.auth.uid; // Only creator can edit topic
    }

    match /forums/{topicId}/{collectionId}/{docId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if resource.data.authorRef == request.auth.uid; // Only author can edit/delete
    }

    // Groups can be public or private.
    // Reading public groups is allowed. Reading members/posts of private groups requires membership.
    match /groups/{groupId} {
        allow read: if resource.data.isPublic == true || get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
        allow create: if request.auth != null;
        allow update: if resource.data.ownerId == request.auth.uid;
    }
    
    // Rules for group subcollections (members, posts, etc.)
    match /groups/{groupId}/{collectionId}/{docId} {
        // Members can read posts/replies
        allow read: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
        // Members can create posts/replies
        allow create: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
        // Only author can edit/delete their own posts/replies
        allow update, delete: if resource.data.authorRef == request.auth.uid;
    }
    
    // Users can create join requests. Group owner can read/delete them.
    match /groups/{groupId}/join_requests/{userId} {
      allow create: if request.auth.uid == userId;
      allow read, delete: if get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId == request.auth.uid;
    }


    // Social feed posts are public. Only authenticated users can create them.
    // Only the author can delete their own post.
    match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if resource.data.userId == request.auth.uid;
        allow delete: if resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
    }

    // Rules for post subcollections (likes, comments, votes)
    match /posts/{postId}/{collection}/{userId} {
        allow read: if true;
        allow write: if request.auth.uid == userId; // Users can only manage their own likes/comments/votes
    }

    // Connection requests can only be read by the recipient and created by anyone.
    match /connection_requests/{reqId} {
        allow create: if request.auth != null;
        allow read, update, delete: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.requesterId;
    }
    
    // Notifications are private to the user.
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }

    // The knowledge base is public, but only specific roles can write.
    // (This assumes you have a custom claim or a role field for admins/curators).
    match /knowledge_articles/{articleId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
    }

    // Traceability registry and events are public.
    match /vti_registry/{vtiId} {
        allow read: if true;
        allow create, write: if request.auth != null; // For simplicity, any authenticated user can create/write. Refine later.
    }
    match /traceability_events/{eventId} {
        allow read: if true;
        allow create, write: if request.auth != null;
    }

    // Search index is readable by authenticated users. It is only written to by backend functions.
    match /search_index/{docId} {
      allow read: if request.auth != null;
      allow write: if false; // Deny all client-side writes
    }
    
    // Allow read access to the knowledge base for AI tools
    match /knowledge_base/{docId} {
        allow read: if request.auth != null;
    }
    
    // Allow read/write access to recovery sessions for any user (as it's short-lived and token-based)
    match /recovery_sessions/{sessionId} {
      allow read, write: if true;
    }

  }
}
