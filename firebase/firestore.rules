rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================================
    // Default Deny: No one can access any collection unless explicitly allowed below.
    // =============================================================
    match /{document=**} {
      allow read, write: if false;
    }

    // =============================================================
    // User Profiles
    // =============================================================
    match /users/{userId} {
      // Anyone authenticated can read a user's public profile.
      allow get: if request.auth != null;
      // Anyone can query the list of users (e.g., for search).
      allow list: if request.auth != null;
      // Only the user themselves or an admin can update their own profile.
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
      // A user can only be created via the onUserCreate backend function.
      allow create: if false;
      // A user can only be deleted via the onUserDelete backend function.
      allow delete: if false;
    }
    
    // =============================================================
    // User Subcollections (Workers, Inventory, etc.)
    // =============================================================
     match /users/{userId}/{collection}/{docId} {
      // Only the owner of the main user document can access their own subcollections.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // =============================================================
    // Marketplace & Agri-Events
    // =============================================================
    match /marketplaceItems/{itemId} {
      // Anyone can read a marketplace listing.
      allow read: if true;
      // Only authenticated users can create a listing.
      allow create: if request.auth != null;
      // Only the seller or an admin can update/delete a listing.
      allow update, delete: if request.auth.uid == resource.data.sellerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
    }
    
    match /agri_events/{eventId} {
      // Anyone can read an event listing.
      allow read: if true;
       // Only authenticated users can create an event listing.
      allow create: if request.auth != null;
      // Only the organizer or an admin can update/delete an event.
      allow update, delete: if request.auth.uid == resource.data.organizerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
    }

    match /marketplace_orders/{orderId} {
      // Only the buyer or seller involved in the order can read it.
      allow get: if request.auth != null && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
      // Only authenticated users can create orders.
      allow create: if request.auth != null;
      // Only the seller can update the order status.
      allow update: if request.auth != null && request.auth.uid == resource.data.sellerId;
    }

    // =============================================================
    // Community & Social Features (Posts, Forums, Groups)
    // =============================================================
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow update only for likes/comments, but actual logic is in backend.
      // Allow delete only for the author or an admin.
      allow update: if request.auth != null; 
      allow delete: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
    }

    match /posts/{postId}/{subcollection}/{docId} {
        allow read: if true;
        allow create, delete: if request.auth != null;
    }

    match /forums/{topicId} {
        allow read: if true;
        allow create: if request.auth != null;
    }

    match /forums/{topicId}/{subcollection}/{docId} {
       allow read: if true;
       allow create: if request.auth != null;
    }
    
    match /groups/{groupId} {
        allow read: if true;
        allow create: if request.auth != null;
    }
    
     match /groups/{groupId}/{subcollection}/{docId} {
        // Members of a group can read its content (e.g., posts)
        allow read: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
        // Members of a group can write (e.g., create posts)
        allow create: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
     }

    // =============================================================
    // Farm Management
    // =============================================================
    match /farms/{farmId} {
      // A user can only read/write their own farm documents.
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow create: if request.auth != null;
    }

    match /crops/{cropId} {
       // A user can only read/write their own crop documents.
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow create: if request.auth != null;
    }

    match /knf_batches/{batchId} {
       // A user can only read/write their own KNF batches.
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }

    // =============================================================
    // Networking
    // =============================================================
    match /connection_requests/{requestId} {
      // Only the recipient can read/update the request.
      allow get, update: if request.auth != null && request.auth.uid == resource.data.recipientId;
      // Only the requester can create it.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requesterId;
    }

    // =============================================================
    // Messaging
    // =============================================================
    match /conversations/{conversationId} {
      // Only participants of the conversation can access it.
      allow get, list, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
       // Only participants of the conversation can access its messages.
      allow read, create: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // =============================================================
    // Traceability & Other Public/Admin Data
    // =============================================================
    match /vti_registry/{batchId} {
        allow read: if true;
        // Writes are handled by secure backend functions.
        allow write: if false;
    }

    match /traceability_events/{eventId} {
        allow read: if true;
        allow write: if false;
    }
    
     match /knowledge_articles/{articleId} {
      allow read: if true;
      // Writes are handled by secure backend functions (admins).
      allow write: if false;
    }
    
    // The logs for offline changes should only be accessible by the backend.
    match /offline_changes_log/{changeId} {
      allow read, write: if false;
    }
    
     // Profile views can be written by any authenticated user, but are processed by a trigger.
    match /profile_views/{viewId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }
  }
}
