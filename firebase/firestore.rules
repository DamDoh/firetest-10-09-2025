
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default Deny: No one can access any path unless explicitly allowed below.
    match /{document=**} {
      allow read, write: if false;
    }

    // =============================================
    //  USERS & PROFILES
    // =============================================
    match /users/{userId} {
      // Anyone can read a user's public profile data.
      allow read: if request.auth != null;
      // Only the user themselves can update their own profile.
      allow write: if request.auth.uid == userId;
    }
    
    // Subcollections under users
    match /users/{userId}/{subcollection}/{docId} {
        // Only the owner of the main profile can access their own subcollections.
        allow read, write: if request.auth.uid == userId;
    }

    // =============================================
    //  MARKETPLACE & SHOPS
    // =============================================
    match /marketplaceItems/{itemId} {
      // Anyone can read a marketplace listing.
      allow read: if request.auth != null;
      // Only authenticated users can create. The sellerId is validated in the function.
      allow create: if request.auth != null;
      // Only the seller can update or delete their own listing.
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    // Marketplace order rules
    match /marketplace_orders/{orderId} {
        // The buyer or seller can read the order. Admins too.
        allow read: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId;
        // Only a buyer can create an order.
        allow create: if request.auth.uid == request.resource.data.buyerId;
        // Only the seller can update the order status.
        allow update: if request.auth.uid == resource.data.sellerId;
    }

    // =============================================
    //  COMMUNITY (POSTS, FORUMS, GROUPS)
    // =============================================
    match /posts/{postId} {
      // Anyone can read a post.
      allow read: if request.auth != null;
      // Any authenticated user can create a post.
      allow create: if request.auth != null;
      // Only the post author can update or delete it.
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    match /posts/{postId}/{subcollection}/{docId} {
      // Any authenticated user can like or comment (create).
      allow create: if request.auth != null;
      // Only the user who created the like/comment can delete it.
      allow delete: if request.auth.uid == docId;
    }
    
    match /forums/{topicId} {
        // Any authenticated user can read forum topics.
        allow read: if request.auth != null;
        // Any authenticated user can create a topic (moderated by function).
        allow create: if request.auth != null;
    }
    
    match /forums/{topicId}/posts/{postId} {
        // Any authenticated user can read posts in a forum.
        allow read: if request.auth != null;
        // Authenticated users can create posts (owner validated in function).
        allow create: if request.auth != null;
        // Only the author can edit/delete their post.
        allow update, delete: if request.auth.uid == resource.data.authorRef;
    }
    
    match /forums/{topicId}/posts/{postId}/replies/{replyId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow delete: if request.auth.uid == resource.data.authorRef;
    }
    
     match /groups/{groupId} {
        // Reading is based on the group's isPublic flag or membership.
        allow read: if resource.data.isPublic == true || get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data != null;
        // Any authenticated user can create a group.
        allow create: if request.auth != null;
        // Only the owner can update the group details.
        allow update: if request.auth.uid == resource.data.ownerId;
    }

    match /groups/{groupId}/{subcollection}/{docId} {
        // Members of the group can read content like posts and member lists.
        allow read: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data != null;
        // Members can create content (posts, replies). Owners can manage members.
        allow create: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data != null;
        // Deletion/Update rules would be more granular based on ownership or roles.
        // For simplicity, we allow owners to delete/update.
        allow update, delete: if get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId == request.auth.uid;
    }
    
    // =============================================
    //  FARM MANAGEMENT
    // =============================================
     match /farms/{farmId} {
      // Only the owner can read or write their farm data.
      allow read, write: if request.auth.uid == resource.data.ownerId;
      // Allow authenticated user to create a farm (ownerId is set by function).
      allow create: if request.auth != null;
    }
    
     match /crops/{cropId} {
      // Only the owner can read or write their crop data.
      allow read, write: if request.auth.uid == resource.data.ownerId;
      // Allow authenticated user to create a crop (ownerId is set by function).
      allow create: if request.auth != null;
    }
    
     match /knf_batches/{batchId} {
        // Only the owner can manage their KNF batches.
        allow read, write: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
     }

    // =============================================
    //  EVENTS & TRACEABILITY
    // =============================================
    match /agri_events/{eventId} {
        // Anyone can read event details.
        allow read: if request.auth != null;
        // Any authenticated user can create an event.
        allow create: if request.auth != null;
        // Only the organizer can update/delete.
        allow update, delete: if request.auth.uid == resource.data.organizerId;
    }
    
    match /agri_events/{eventId}/{subcollection}/{docId} {
        // Any authenticated user can register for an event.
        allow create: if request.auth != null;
        // Reading attendees/staff might be restricted to the organizer.
        allow read: if get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId == request.auth.uid;
        // Updating check-in status requires organizer/staff roles (handled in function).
        allow update: if request.auth != null;
    }
    
    match /traceability_events/{eventId} {
        // Events are read via getVtiTraceabilityHistory, direct reads can be restricted.
        allow read: if request.auth != null; // Allow reads for now for activity feed
        allow create: if request.auth != null;
    }

    match /vti_registry/{vtiId} {
        // Anyone can read a VTI record if it's public.
        allow read: if resource.data.isPublicTraceable == true;
        // Creation is handled by secure cloud functions.
        allow create: if false;
        allow write: if false;
    }
    
    // =============================================
    //  INTERNAL & LOGGING
    // =============================================
    match /profile_views/{viewId} {
        // Only allow creation through the backend function.
        allow read, write: if false;
        allow create: if request.auth != null; // Callable function will validate
    }

    match /search_index/{docId} {
        // Publicly readable for search queries.
        allow read: if true;
        // Only backend can write to the index.
        allow write: if false;
    }
    
    match /offline_changes_log/{changeId} {
      // Only the user can write their own change log.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Nobody can read or update directly; this is for backend processing only.
      allow read, update, delete: if false;
    }

    match /notifications/{notificationId} {
        // A user can only read their own notifications.
        allow read, update: if request.auth.uid == resource.data.userId;
        // Creation is handled by backend triggers.
        allow create, delete: if false;
    }

    match /conversations/{conversationId} {
        // Only participants can read the conversation document.
        allow read: if request.auth.uid in resource.data.participantIds;
        // Update (for last message) is handled by the backend function.
        // Creation is handled by the getOrCreateConversation function.
        allow write: if false;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
        // Only participants can read messages.
        allow read: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds[0] == request.auth.uid || 
                     get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds[1] == request.auth.uid;
        // Only a participant can write a message.
        allow create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        // Users cannot edit or delete messages.
        allow update, delete: if false;
    }

  }
}
