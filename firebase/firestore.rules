rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default Deny: By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection:
    // Users can read public portions of any profile.
    // Users can create, update, and delete their own profile document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Marketplace Items:
    // Anyone can read marketplace listings.
    // Authenticated users can create listings.
    // Users can only update/delete their own listings.
    match /marketplaceItems/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    // Agri-Events:
    // Anyone can read event listings.
    // Authenticated users can create events.
    // Organizers can update/delete their own events.
    match /agri_events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.organizerId;
      
      // Registrations subcollection
      match /registrations/{userId} {
        // Any authenticated user can register themselves for an event
        allow create: if request.auth.uid == userId;
        // Only the event organizer or the registered user can read/update the registration
        allow read, update: if request.auth.uid == userId || request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
      }
      
      // Coupons subcollection
      match /coupons/{couponId} {
        // Only the event organizer can create/update/delete coupons
        allow read, write: if request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
      }
    }
    
    // Marketplace Coupons (Seller-wide):
    // Only the seller can manage their own coupons.
    match /marketplace_coupons/{couponId} {
        allow read, write: if request.auth.uid == resource.data.sellerId;
    }

    // Farms, Crops, KNF Batches:
    // Users can only manage their own farm-related data.
    match /farms/{farmId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }
    match /crops/{cropId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }
    match /knf_batches/{batchId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Traceability Events:
    // For now, allow authenticated users to create. Reading is more complex and
    // should be handled via secure backend functions. We will deny client reads for now.
    match /traceability_events/{eventId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }
    
    // VTI Registry
    // Similar to events, creation is via backend. Reading is complex. Deny client access.
    match /vti_registry/{vtiId} {
       allow read, write: if false;
    }

    // Forums & Posts:
    // Authenticated users can read/write to forums and posts.
    // Users can only update/delete their own content.
    match /forums/{topicId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.createdBy;
    }
    match /forums/{topicId}/posts/{postId} {
       allow read, create: if request.auth != null;
       allow update, delete: if request.auth.uid == resource.data.authorRef;
       
       // Replies subcollection
       match /replies/{replyId} {
         allow read, create: if request.auth != null;
         allow update, delete: if request.auth.uid == resource.data.authorRef;
       }
    }
    
    // Knowledge Base: Read-only for authenticated users.
    // Content should be managed via a trusted backend or admin panel.
    match /knowledge_base/{docId} {
      allow read: if request.auth != null;
      allow write: if false; // Deny client writes
    }
    
    // Notifications:
    // Users can only read/update their own notifications.
    // Creation is handled by backend functions.
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create, delete: if false;
    }
  }
}
