rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================================================
    // Helper Functions
    // =================================================================
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =================================================================
    // User Profiles
    // =================================================================
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if isSignedIn();

      // Users can only create their own profile document (via onUserCreate trigger)
      // and can only update their own profile.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.uid == userId; // Ensure they can't change their UID
      
      // Users cannot delete their own profile doc directly; must be done via Auth trigger.
      allow delete: if false;
    }
    
    // =================================================================
    // Marketplace & Talent Exchange
    // =================================================================
    match /marketplaceItems/{itemId} {
      // Anyone can read a listing.
      allow read: if isSignedIn();
      
      // Only authenticated users can create listings.
      // The `sellerId` must match the creator's UID.
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      
      // Only the original seller can update or delete their listing.
      allow update, delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }

    match /marketplace_orders/{orderId} {
        // Only the buyer or seller involved in the order can read it.
        allow read: if isSignedIn() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
        
        // Only the buyer can create the order.
        allow create: if isSignedIn() && request.resource.data.buyerId == request.auth.uid;
        
        // Only the seller can update the status (confirm, ship, etc.)
        allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
        
        // Buyer can cancel, seller can cancel. Add more specific logic if needed.
        allow delete: if isSignedIn() && (isOwner(resource.data.buyerId) || isOwner(resource.data.sellerId));
    }

    // =================================================================
    // Community: Feed & Forums
    // =================================================================
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    match /posts/{postId}/likes/{userId} {
      // Users can only like/unlike for themselves.
      allow create, delete: if isSignedIn() && isOwner(userId);
    }
    
    match /posts/{postId}/comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Add rules for update/delete if you implement that functionality
    }

    match /forums/{topicId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    match /forums/{topicId}/posts/{postId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorRef == request.auth.uid;
        allow update, delete: if isSignedIn() && resource.data.authorRef == request.auth.uid;
    }
    
    match /forums/{topicId}/posts/{postId}/replies/{replyId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorRef == request.auth.uid;
    }

    // =================================================================
    // Farm Management
    // =================================================================
    match /farms/{farmId} {
        allow read, update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }
    
     match /crops/{cropId} {
        allow read, update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    // =================================================================
    // Traceability - Events should only be written by secure backend functions.
    // =================================================================
    match /traceability_events/{eventId} {
      // Allow any authenticated user to read events, as they will be fetched for public reports.
      allow read: if isSignedIn();
      // Deny all client-side writes. Events MUST be logged via Cloud Functions.
      allow write: if false;
    }
    
    match /vti_registry/{vtiId} {
      allow read: if isSignedIn();
      allow write: if false; // VTIs must only be created by backend functions.
    }
    
    // =================================================================
    // Secure Backend Collections - Client should not have direct access
    // =================================================================
    match /offline_changes_log/{logId} {
      allow read, write: if false; // Only backend functions can access
    }
    
    match /credit_scores/{userId} {
       allow read, write: if false; // Only backend functions can access
    }

    match /profile_views/{viewId} {
      // Only allow creation through our secure `logProfileView` function.
      allow create: if isSignedIn();
      allow read, update, delete: if false;
    }
  }
}
