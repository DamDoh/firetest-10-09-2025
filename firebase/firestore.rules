rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =====================================================================
    // Helper Functions
    // =====================================================================
    
    // Checks if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Checks if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if the user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == role;
    }
    
    // Checks if the user has one of several roles
    function hasAnyRole(roles) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole;
      return userRole in roles;
    }
    
    // =====================================================================
    // Default Deny All
    // By default, nobody can read or write to any document.
    // We must explicitly grant access below.
    // =====================================================================
    match /{document=**} {
      allow read, write: if false;
    }
    
    // =====================================================================
    // User Profiles (`users` collection)
    // =====================================================================
    match /users/{userId} {
      // Anyone can view a public profile
      allow read: if isSignedIn();
      
      // Only the owner can update their own profile
      allow update: if isOwner(userId);
      
      // Nobody can create or delete user profiles directly, this is handled by backend triggers
      allow create, delete: if false;
    }
    
    // =====================================================================
    // Marketplace & Shops (`marketplaceItems`, `shops`, `marketplace_orders`)
    // =====================================================================
    match /marketplaceItems/{itemId} {
      // Anyone can view a marketplace listing
      allow read: if isSignedIn();
      // Only the owner (seller) can update their listing
      allow update: if isOwner(resource.data.sellerId);
      // Any authenticated user can create a listing for themselves
      allow create: if isOwner(request.resource.data.sellerId);
      // Only the owner can delete their listing
      allow delete: if isOwner(resource.data.sellerId);
    }

    match /marketplace_orders/{orderId} {
        allow read, update: if isOwner(resource.data.buyerId) || isOwner(resource.data.sellerId);
        allow create: if isOwner(request.resource.data.buyerId);
        allow delete: if isOwner(resource.data.sellerId);
    }
    
    match /shops/{shopId} {
        allow read: if true; // Publicly viewable
        allow create: if isOwner(request.resource.data.ownerId);
        allow update: if isOwner(resource.data.ownerId);
        allow delete: if isOwner(resource.data.ownerId);
    }

    // =====================================================================
    // Social & Community Features (`posts`, `forums`, `groups`)
    // =====================================================================
    match /posts/{postId} {
        allow read: if isSignedIn();
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isOwner(resource.data.userId);
        allow delete: if isOwner(resource.data.userId);
        
        match /likes/{userId} {
            allow read: if isSignedIn();
            allow create, delete: if isOwner(userId);
        }
        
        match /comments/{commentId} {
            allow read: if isSignedIn();
            allow create: if isOwner(request.resource.data.userId);
        }
    }
    
    match /forums/{topicId} {
        allow read: if isSignedIn();
        allow create: if hasAnyRole(['Admin', 'Moderator']); // Only admins can create topics
        
        match /posts/{postId} {
            allow read: if isSignedIn();
            allow create: if isOwner(request.resource.data.authorRef);
            
            match /replies/{replyId} {
                allow read: if isSignedIn();
                allow create: if isOwner(request.resource.data.authorRef);
            }
        }
    }
    
    match /groups/{groupId} {
        // Public groups can be read by anyone, private groups only by members
        function isMember() {
            return exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
        }
        allow read: if resource.data.isPublic == true || isMember();
        allow create: if isOwner(request.resource.data.ownerId);
        
        match /members/{memberId} {
            allow read: if isSignedIn();
            // User can add themselves (join) or the owner can add them. User can also remove themselves (leave).
            allow create, delete: if isOwner(memberId) || isOwner(get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId);
        }
        
        match /posts/{postId} {
            allow read, create, update, delete: if isMember(); // Only members can interact with posts
        }
    }

    // =====================================================================
    // Farm Management (`farms`, `crops`, `knf_batches`)
    // =====================================================================
    match /farms/{farmId} {
        allow read, update, delete: if isOwner(resource.data.ownerId);
        allow create: if isOwner(request.resource.data.ownerId);
    }
    
    match /crops/{cropId} {
        allow read, update, delete: if isOwner(resource.data.ownerId);
        allow create: if isOwner(request.resource.data.ownerId);
    }
    
     match /knf_batches/{batchId} {
        allow read, update, delete: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
    }

    // =====================================================================
    // Traceability & Events (`traceability_events`, `vti_registry`, `agri_events`)
    // =====================================================================
    match /traceability_events/{eventId} {
      allow read, create: if isSignedIn(); // Allow any signed-in user to read/create events
    }
    
    match /vti_registry/{vtiId} {
        // VTI details are public to promote transparency
        allow read: if true; 
        allow create, update: if isSignedIn();
    }
    
    match /agri_events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.organizerId); // Only the organizer can update
      
      match /attendees/{userId} {
        allow read: if isOwner(userId) || isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
        allow create: if isOwner(userId);
      }
    }
    
    // =====================================================================
    // System & Logging Collections (`offline_changes_log`, `notifications`)
    // =====================================================================
    match /offline_changes_log/{changeId} {
      // Only the user who created the log can write to it
      allow write: if isOwner(request.resource.data.userId);
      // No one should read these logs directly, they are processed by backend.
      allow read: if false;
    }
    
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create, delete: if false; // Created by backend triggers only
    }

    // =====================================================================
    // Search Index - Read-only for clients
    // =====================================================================
    match /search_index/{docId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend functions can write to the index
    }
  }
}
