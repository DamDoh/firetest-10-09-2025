
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own profile, but only write through cloud functions.
    // Public profiles are readable by any authenticated user.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId; // For specific client-side updates like FCM token
      // Create is handled by registerUser cloud function.
      // Most updates handled by upsertStakeholderProfile cloud function.
    }

    // Farms can only be read/written by their owner.
    match /farms/{farmId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }

    // Crops can only be read/written by their owner.
    match /crops/{cropId} {
      allow read, write: if request.auth.uid == resource.data.ownerId;
    }
    
    // KNF Batches can only be read/written by their owner.
    match /knf_batches/{batchId} {
      allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Marketplace items are public to read. Only owner can write.
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    // Marketplace orders can be read by buyer or seller. Only written by buyer on create.
    match /marketplace_orders/{orderId} {
      allow create: if request.auth.uid == request.resource.data.buyerId;
      allow read, update: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId;
    }

    // Forum topics are public to read, but only authenticated users can create.
    match /forums/{topicId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.creatorId; // Only creator can edit topic
        
        // Posts can be read by anyone, created by auth users.
        match /posts/{postId} {
            allow read: if true;
            allow create, update, delete: if request.auth != null;
            
            // Likes are private.
            match /likes/{likeId} {
              allow read, write: if request.auth.uid == likeId;
            }

            // Replies have same logic.
            match /replies/{replyId} {
                allow read: if true;
                allow create: if request.auth != null;
            }
        }
    }
    
    // Group rules: Public groups readable, private groups members only.
    match /groups/{groupId} {
        allow read: if resource.data.isPublic == true || get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
        allow create: if request.auth != null;
        
        match /members/{memberId} {
            allow read: if true;
            allow create: if request.auth.uid == memberId; // Can only add self
            allow delete: if request.auth.uid == memberId; // Can only remove self
        }
        
        match /posts/{postId} {
            allow read, create: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
            
            match /replies/{replyId} {
                 allow read, create: if get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).exists;
            }
        }
    }

    // Agri-Events are public to read. Creation and registration handled by functions.
    match /agri_events/{eventId} {
      allow read: if true;
      match /attendees/{attendeeId} {
        allow read: if request.auth.uid == attendeeId || request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
      }
      match /coupons/{couponId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
      }
       match /staff/{staffId} {
        allow read: if request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
      }
    }
    
    // VTI is public to read.
    match /vti_registry/{vtiId} {
        allow read: if true;
    }

    // Traceability events are public to read.
    match /traceability_events/{eventId} {
        allow read: if true;
    }
    
    // Knowledge articles are public to read.
    match /knowledge_base/{docId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true; // Only admins write
    }

    match /knowledge_articles/{articleId} {
        allow read: if true;
        allow write: if request.auth.token.admin == true;
    }
    
    // Notifications are private to the user.
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
    }
    
    // Connection requests can only be read by recipient, created by requester. Recipient can update status.
    match /connection_requests/{requestId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.requesterId;
        allow read, update, delete: if request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.requesterId;
    }
    
    // Profile views can be created by any auth user. Cannot be read/updated/deleted by client.
    match /profile_views/{viewId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.viewerId;
        allow read, update, delete: if false;
    }

    // Recovery sessions can be created by anyone, but can only be updated by authenticated users (the 'friend').
    match /recovery_sessions/{sessionId} {
        allow create: if true;
        allow read: if true; // The client needs to poll this
        allow update: if request.auth != null; // Friend confirming must be logged in.
    }
    
    // Only authenticated users can access the search index.
    match /search_index/{indexId} {
        allow read: if request.auth != null;
        allow write: if false; // Only cloud functions can write
    }
  }
}
