
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- USER PROFILES ---
    // Users can read any public profile.
    // They can only create their own profile (which is handled by a secure Cloud Function).
    // They can only update or delete their own profile document.
    match /users/{userId} {
      allow read: if true;
      allow create: if false; // Creation is handled by onUserCreate trigger
      allow update, delete: if request.auth.uid == userId;
    }

    // --- MARKETPLACE ---
    // Allow anyone to read marketplace listings.
    // Only authenticated users can create listings.
    // Only the owner of a listing can update or delete it.
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    // Allow authenticated users to create orders.
    // Only the buyer or seller can read an order.
    // Only the seller can update an order (e.g., status).
    match /marketplace_orders/{orderId} {
        allow read: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId;
        allow create: if request.auth != null;
        allow update: if request.auth.uid == resource.data.sellerId;
        allow delete: if false; // Orders should be cancelled, not deleted
    }

    // --- COMMUNITY & SOCIAL ---
    // Allow authenticated users to read posts, comments, likes.
    // Allow authenticated users to create their own content.
    // Only the author can delete their content.
    match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if request.auth.uid == resource.data.userId; // e.g. for editing
        allow delete: if request.auth.uid == resource.data.userId;
        
        match /comments/{commentId} {
            allow read: if true;
            allow create: if request.auth.uid == request.resource.data.userId;
            allow delete: if request.auth.uid == resource.data.userId;
        }
        
        match /likes/{userId} {
            allow read: if true;
            allow create, delete: if request.auth.uid == userId;
        }

        match /votes/{userId} {
          allow read: if true;
          allow create: if request.auth.uid == userId;
          allow delete: if false; // Users shouldn't be able to change their vote
        }
    }
    
    // Public forums and posts can be read by anyone.
    // Only authenticated users can create topics and posts.
    match /forums/{topicId} {
        allow read: if true;
        allow create: if request.auth != null;

        match /posts/{postId} {
             allow read: if true;
             allow create: if request.auth != null;
             
             match /replies/{replyId} {
                allow read: if true;
                allow create: if request.auth != null;
             }
        }
    }
    
    // --- FARM MANAGEMENT ---
    // A user can only access farms and crops that they own.
    match /farms/{farmId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.ownerId;
    }
    match /crops/{cropId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.ownerId;
    }
     match /knf_batches/{batchId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.userId;
    }

    // --- NOTIFICATIONS ---
    // Users can only access their own notifications.
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create, delete: if false; // Handled by backend triggers
    }
    
    // --- OFFLINE SYNC LOG ---
    // Users can create their own change logs, but cannot read or modify them.
    match /offline_changes_log/{changeId} {
        allow read, update, delete: if false;
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
     // --- UNIVERSAL ID / RECOVERY ---
    // Recovery sessions should not be readable by any client.
    match /recovery_sessions/{sessionId} {
      allow read, write: if false;
    }
  }
}
