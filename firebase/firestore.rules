
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Security Rules for DamDoh Firestore Collections
    // =================================================================
    
    // Users Collection
    // - Allow users to read their own profile.
    // - Allow users to create their own profile (on sign-up).
    // - Allow users to update their own profile.
    // - Public read for basic profile info is handled by secure cloud functions.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Typically on signup
    }
    
    // Farms Collection
    // - Only the owner can create, read, update, or delete their farm data.
    match /farms/{farmId} {
      allow read, update, delete: if request.auth.uid == resource.data.ownerId;
      allow create: if request.auth.uid == request.resource.data.ownerId;
    }
    
    // Crops Collection
    // - Similar to farms, only the owner can manage their crop data.
     match /crops/{cropId} {
      allow read, update, delete: if request.auth.uid == resource.data.ownerId;
      allow create: if request.auth.uid == request.resource.data.ownerId;
    }
    
    // KNF Batches Collection
    match /knf_batches/{batchId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Marketplace Items
    // - Anyone can read marketplace listings.
    // - Authenticated users can create listings.
    // - Only the seller can update or delete their own listings.
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }

    // Marketplace Orders
    // - Users can read orders where they are the buyer or the seller.
    // - Users can create their own orders (buyerId must match auth uid).
    // - Only the buyer or seller can update the status (e.g., 'shipped', 'received').
    match /marketplace_orders/{orderId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.buyerId;
      allow update: if request.auth != null && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
      allow delete: if false; // Deletion should be handled by a function for archival
    }
    
    // Shops Collection
    // - Anyone can read shopfronts.
    // - Authenticated users can create shops.
    // - Only the owner can update their shop.
    match /shops/{shopId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update: if request.auth.uid == resource.data.ownerId;
        // Subcollections can inherit or have their own rules
        match /{allChildren=**} {
            allow read, write: if request.auth.uid == get(/databases/$(database)/documents/shops/$(shopId)).data.ownerId;
        }
    }
    
    // Knowledge Base
    // - Authenticated users can read.
    // - Admins/Curators can write (managed via custom claims, logic in backend).
    match /knowledge_base/{docId} {
      allow read: if request.auth != null;
      allow write: if false; // Handled by secure backend functions
    }
    
    // Traceability Events & VTI Registry
    // - Public read for traceability is often desired.
    // - Writing should be restricted to backend functions to maintain integrity.
    match /traceability_events/{eventId} {
      allow read: if true;
      allow write: if false; 
    }
    match /vti_registry/{vtiId} {
        allow read: if true;
        allow write: if false;
    }

    // Forums & Groups
    // - Public content is readable by anyone.
    // - Authenticated users can create content (posts, replies, etc.).
    // - Specific update/delete logic can be refined (e.g., only author or admin).
    match /forums/{topicId}/{allChildren=**} {
        allow read: if true;
        allow write: if request.auth != null;
    }
     match /groups/{groupId}/{allChildren=**} {
        allow read: if get(/databases/$(database)/documents/groups/$(groupId)).data.isPublic == true || request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
        allow write: if request.auth != null;
    }

    // Notifications: Strictly user-specific
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
