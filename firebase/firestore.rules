rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =================================
    // User Profiles
    // =================================
    match /users/{userId} {
      // Anyone can see a public profile
      allow read: if true;
      // Only the owner can create or update their own profile
      allow write: if isOwner(userId);
    }
    
    // User sub-collections (e.g., for labor management)
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if isOwner(userId);
    }

    // =================================
    // Marketplace & Shops
    // =================================
    match /marketplaceItems/{itemId} {
      // Anyone can view listings
      allow read: if true;
      // Only the listing owner can create/update/delete
      allow create, update, delete: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
    }
    
    // Bookings and Staff are subcollections of marketplace items
    match /marketplaceItems/{itemId}/{subcollection}/{docId} {
        // Anyone authenticated can create a booking for themselves
        allow create: if subcollection == 'bookings' && isOwner(docId);
        // Only the item owner can manage bookings, staff etc.
        allow read, write, delete: if isSignedIn() && get(/databases/$(database)/documents/marketplaceItems/$(itemId)).data.sellerId == request.auth.uid;
    }

    match /shops/{shopId} {
        allow read: if true;
        // Only the shop owner can create/update/delete
        allow create, update, delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }
    
    match /marketplace_orders/{orderId} {
        // Buyer and seller can view the order
        allow read: if isSignedIn() && (isOwner(resource.data.buyerId) || isOwner(resource.data.sellerId));
        // Only the buyer can create, only the seller can update status
        allow create: if isSignedIn() && isOwner(request.resource.data.buyerId);
        allow update: if isSignedIn() && isOwner(resource.data.sellerId);
    }
    
    match /marketplace_coupons/{couponId} {
        // Only the seller can manage their own coupons
        allow read, write: if isSignedIn() && isOwner(resource.data.sellerId);
    }
    
    // =================================
    // Forums & Groups (Community)
    // =================================
    match /forums/{topicId} {
        allow read: if true;
        // Authenticated users can create topics
        allow create: if isSignedIn();
        // Future: allow update only by creator or admins
        allow update: if isSignedIn(); 
    }
    
    match /forums/{topicId}/{subcollection}/{postId} {
        allow read: if true;
        // Authenticated users can post and reply
        allow create: if isSignedIn();
        // Future: allow update/delete by author or admins
        allow update, delete: if isSignedIn();
    }
    
    match /groups/{groupId} {
        // Public groups are readable by all, private only by members (more complex rule needed)
        allow read: if resource.data.isPublic == true || (isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)));
        allow create: if isSignedIn();
        // Only owner can update group details
        allow update: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    
     match /groups/{groupId}/{subcollection}/{docId} {
       // Members can read posts/replies
       allow read: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
       // Members can create posts/replies. Joining is handled by cloud functions.
       allow create: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
       // Future: allow update/delete by author or admins
       allow update, delete: if isSignedIn();
     }

    // =================================
    // Social Features (Likes, Connections, Messages)
    // =================================
    match /posts/{postId}/{subcollection}/{docId} {
        // Anyone can read comments/likes
        allow read: if true;
        // Authenticated users can write to these subcollections (e.g. create a like)
        allow write: if isSignedIn();
    }
    
    match /conversations/{conversationId} {
      // Only participants in the conversation can read/write
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
       allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }
    
    match /connection_requests/{reqId} {
        // Only requester or recipient can read/write
        allow read, write: if isSignedIn() && (isOwner(resource.data.requesterId) || isOwner(resource.data.recipientId));
    }
    
    // =================================
    // Knowledge Base & Events
    // =================================
    match /knowledge_base/{docId} {
      allow read: if true;
      // Write access should be restricted to admins
      allow write: if false; 
    }
    
     match /agri_events/{eventId} {
      allow read: if true;
      // Authenticated users can create, only owners can update
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.organizerId);
    }

    match /agri_events/{eventId}/{subcollection}/{docId} {
      // Any authenticated user can register (create) for an event
      allow create: if isSignedIn();
      // Only the event organizer can manage attendees/staff
      allow read, write, delete: if isSignedIn() && get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId == request.auth.uid;
    }

    // =================================
    // Farm & Traceability
    // =================================
    match /farms/{farmId} {
      allow read, write: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    match /crops/{cropId} {
       allow read, write: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    match /knf_batches/{batchId} {
       allow read, write: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /traceability_events/{eventId} {
        allow read: if true;
        allow create: if isSignedIn();
    }
    
    // Deny all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
