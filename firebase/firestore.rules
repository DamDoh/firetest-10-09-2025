rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // ============== USERS & PROFILES ==============
    match /users/{userId} {
      // Allow anyone to read a user's public profile.
      allow read: if true;
      // Allow users to create their own profile document.
      // The onUserCreate trigger populates this, but this rule allows for updates upon first sign-in.
      allow create: if request.auth.uid == userId;
      // Allow users to update their own profile.
      allow update: if request.auth.uid == userId;
      // Allow users to delete their own account data via a backend function.
      allow delete: if request.auth.uid == userId;

      // Sub-collections for a user
      match /workers/{workerId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /workers/{workerId}/work_logs/{logId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /workers/{workerId}/payments/{paymentId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /assets/{assetId} {
        allow read, write: if request.auth.uid == userId;
      }
       match /inventory/{itemId} {
        allow read, write: if request.auth.uid == userId;
      }
       match /certifications/{certId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /api_keys/{keyId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // ============== COMMUNITY (Posts, Forums, Groups) ==============
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only the author or an admin can delete/update a post
      allow update, delete: if resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole == 'Admin';
      
      match /likes/{userId} {
        allow read: if true;
        // A user can only like/unlike for themselves
        allow create, delete: if request.auth.uid == userId;
      }

      match /comments/{commentId} {
         allow read: if true;
         allow create: if request.auth != null;
      }
       match /votes/{userId} {
         allow read: if true;
         allow create: if request.auth.uid == userId;
      }
    }

    match /forums/{topicId} {
      allow read: if true;
      allow create: if request.auth != null; // Allow any authenticated user to create a topic
      
      match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth != null; // Allow any authenticated user to post
        
         match /replies/{replyId} {
            allow read: if true;
            allow create: if request.auth != null;
        }
      }
    }

    match /groups/{groupId} {
      // Read public group info
      allow read: if resource.data.isPublic == true || request.auth.uid in resource.data.memberIds;
      allow create: if request.auth != null;
      // Only owner can update group details
      allow update: if resource.data.ownerId == request.auth.uid;
      
      match /members/{memberId} {
        allow read: if true;
        // Allow user to join/leave (create/delete their own membership doc)
        allow create, delete: if request.auth.uid == memberId;
      }
       match /join_requests/{requestId} {
          allow read, write: if request.auth != null; // Managed by backend function with owner check
      }
      
      match /posts/{postId} {
        allow read: if resource.data.isPublic == true || request.auth.uid in resource.data.memberIds; // Placeholder
        allow create, update, delete: if request.auth.uid == resource.data.authorRef; // Only author
        
        match /replies/{replyId} {
           allow read: if true;
           allow create: if request.auth != null; // any authenticated user
        }
      }
    }

    // ============== MARKETPLACE ==============
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.sellerId;
      allow delete: if request.auth.uid == resource.data.sellerId;

       match /bookings/{bookingId} {
          allow read, write: if request.auth != null;
      }
    }
    
    match /marketplace_orders/{orderId} {
      // Buyer and Seller can read/update the order
      allow read, update: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId;
      // Only a buyer can create an order
      allow create: if request.auth.uid == request.resource.data.buyerId;
    }

     match /marketplace_coupons/{couponId} {
      // Coupons are read by a backend function, but creating/updating is restricted.
      allow read: if request.auth != null; 
      allow create, update, delete: if request.auth.uid == request.resource.data.sellerId;
    }

     match /shops/{shopId} {
      allow read: if true;
      allow create, update: if request.auth.uid == request.resource.data.ownerId;
    }

    // ============== TRACEABILITY & OTHER BACKEND COLLECTIONS ==============
    match /traceability_events/{eventId} {
      // Public can read, only backend can write.
      allow read: if true;
      allow write: if false; 
    }
    
    match /vti_registry/{vtiId} {
      allow read: if true;
      allow write: if false;
    }
    
     match /offline_changes_log/{changeId} {
      // Only the user can create their own log entries. Processing is backend-only.
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /search_index/{docId} {
        // Search index is world-readable for any signed-in user
        allow read: if request.auth != null;
        // Only backend can write to search index
        allow write: if false;
    }

    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
    }

    match /profile_views/{viewId} {
       allow create: if request.auth.uid == request.resource.data.viewerId;
    }
    
     match /connection_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.requesterId;
      allow read, update: if request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.recipientId;
    }

     match /financial_transactions/{transactionId} {
      allow read, write: if request.auth.uid == resource.data.userRef.id.split('/').pop();
    }
     match /credit_scores/{scoreId} {
      allow read: if request.auth.uid == resource.id;
    }
     match /financial_products/{productId} {
      allow read: if true;
      allow write: if request.auth.uid == request.resource.data.fiId;
    }
     match /financial_applications/{appId} {
      allow create: if request.auth.uid == request.resource.data.applicantId;
      allow read, update: if request.auth.uid == resource.data.applicantId || request.auth.uid == resource.data.fiId;
    }

    // ============== KNOWLEDGE HUB ==============
    match /knowledge_articles/{articleId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true; // Only admins can write
    }
    match /courses/{courseId} {
        allow read: if true;
        allow write: if request.auth.token.admin == true;

         match /modules/{moduleId} {
            allow read: if true;
            allow write: if request.auth.token.admin == true;
        }
    }
    
    match /agri_events/{eventId} {
        allow read: if true;
        allow create, update: if request.auth.uid == request.resource.data.organizerId;

        match /attendees/{attendeeId} {
            allow read: if true;
            allow create, delete: if request.auth.uid == attendeeId;
        }
        match /coupons/{couponId} {
            allow read: if true;
            allow create, delete, update: if request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
        }
         match /staff/{staffId} {
            allow read: if true;
            allow create, delete: if request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
        }
    }
  }
}
