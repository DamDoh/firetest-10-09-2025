rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Default Security: Deny all reads/writes unless explicitly allowed ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Any authenticated user can create their own profile.
    // Only the profile owner can read, update, or delete their profile.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- Knowledge Base ---
    // Any authenticated user can read from the knowledge base.
    // Only admins can write to it.
    match /knowledge_base/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // --- Marketplace Items ---
    // Anyone can read marketplace listings.
    // Authenticated users can create listings for themselves.
    // Only the original seller can update or delete their listing.
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.sellerId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.sellerId;
    }
    
    // --- Farm Management (Farms, Crops, Batches) ---
    // Only the owner can manage their own farm-related documents.
    // Note the separation of create vs. update/delete rules to handle 'resource' correctly.
    match /farms/{farmId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    
    match /crops/{cropId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    
    match /knf_batches/{batchId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // --- Agri-Business Events ---
    // Anyone can read event details.
    // Only the organizer (an authenticated user) can create or update their event.
    match /agri_events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.organizerId;
      allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }
    
    // --- Event Subcollections (Registrations, Coupons) ---
    match /agri_events/{eventId}/{subcollection}/{docId} {
        // Any authenticated user can create their own registration.
        allow create: if request.auth != null && request.auth.uid == docId;
        // Only the user who registered OR the event organizer can read a registration.
        allow read: if request.auth != null && (request.auth.uid == docId || request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
        // Only the event organizer can manage coupons.
        allow write: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId;
    }

    // --- Community Forums ---
    // Any authenticated user can read or create forum topics.
    match /forums/{topicId} {
        allow read, create: if request.auth != null;
        allow update: if false; // Disallow updates from client for now
    }
    
    // Any authenticated user can read or create posts/replies.
    // Only the author can update or delete their own post/reply.
    match /forums/{topicId}/{subcollection}/{postId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorRef;
    }
    
  }
}
