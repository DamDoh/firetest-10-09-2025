rules_version = '2';

// See: https://firebase.google.com/docs/firestore/security/get-started
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================================
    // Helper Functions
    // =============================================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryRole;
    }
    
    function isAdmin() {
        return getRole() == 'Admin';
    }

    // =============================================================
    // User Profiles (users collection)
    // =============================================================
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if true;
      
      // A user can only create their own profile document (via onUserCreate trigger).
      allow create: if isOwner(userId);
      
      // A user can only update their own profile.
      allow update: if isOwner(userId);
      
      // Users cannot delete their own profile doc directly. 
      // This must be done via a Cloud Function trigger (onUserDeleteCleanup) when the auth user is deleted.
      allow delete: if false;

      // Subcollections for a user
      match /api_keys/{keyId} {
        allow read, write: if isOwner(userId);
      }
      match /certifications/{certId} {
         allow read: if true;
         allow write: if isOwner(userId);
      }
      match /workers/{workerId} {
         allow read, write: if isOwner(userId);
         match /work_logs/{logId} {
           allow read, write: if isOwner(userId);
         }
         match /payments/{paymentId} {
           allow read, write: if isOwner(userId);
         }
      }
       match /inventory/{itemId} {
         allow read, write: if isOwner(userId);
       }
    }
    
    // =============================================================
    // Marketplace
    // =============================================================
    match /marketplaceItems/{itemId} {
      // Anyone can view marketplace listings.
      allow read: if true;
      // Only signed-in users can create listings.
      allow create: if isSignedIn();
      // Only the seller or an Admin can update or delete a listing.
      allow update, delete: if resource.data.sellerId == request.auth.uid || isAdmin();
    }
    
    match /marketplace_orders/{orderId} {
        // A user can read an order if they are the buyer or the seller.
        allow read: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
        // A user can only create an order where they are the buyer.
        allow create: if isSignedIn() && request.resource.data.buyerId == request.auth.uid;
        // Only the seller can update the order status. The buyer can't change it after creation.
        allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
        // No one can delete orders for record keeping.
        allow delete: if false;
    }
    
    match /shops/{shopId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if resource.data.ownerId == request.auth.uid || isAdmin();
    }
    
    match /marketplace_coupons/{couponId} {
        allow read: if true;
        allow create, update, delete: if resource.data.sellerId == request.auth.uid || isAdmin();
    }
    
    // =============================================================
    // Community & Social
    // =============================================================
    match /posts/{postId} {
        allow read: if true;
        allow create: if isSignedIn();
        // Allow update only by the author (e.g., to edit content).
        allow update: if isOwner(resource.data.userId);
        allow delete: if isOwner(resource.data.userId) || isAdmin();

        match /likes/{userId} {
            allow read: if true;
            // A user can only like/unlike for themselves.
            allow write: if isOwner(userId);
        }
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isSignedIn();
            allow delete: if isOwner(resource.data.userId) || isAdmin();
        }
        match /votes/{userId} {
            allow read: if true;
            allow write: if isOwner(userId);
        }
    }
    
    // =============================================================
    // Forums & Groups
    // =============================================================
    match /forums/{topicId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isAdmin(); // Only admins can modify topics
      
      match /posts/{postId} {
        allow read, create: if isSignedIn();
        allow update: if isOwner(resource.data.authorRef);
        allow delete: if isOwner(resource.data.authorRef) || isAdmin();
        
        match /replies/{replyId} {
            allow read, create: if isSignedIn();
            allow update, delete: if isOwner(resource.data.authorRef) || isAdmin();
        }
      }
    }

    match /groups/{groupId} {
        // Public groups are readable by anyone signed in. Private groups only by members.
        allow read: if isSignedIn() && (resource.data.isPublic || exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)));
        allow create: if isSignedIn();
        allow update: if isOwner(resource.data.ownerId) || isAdmin();
        
        match /members/{userId} {
            allow read: if true;
            // Joining/leaving is handled by cloud functions with their own logic.
            // Direct writes are restricted to owners/admins for adding/removing others.
            allow write: if isOwner(userId) || isOwner(get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId);
        }

        match /join_requests/{userId} {
            allow read: if isOwner(get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId);
            allow write: if isOwner(userId); // Users can create/delete their own requests.
        }

        match /posts/{postId} {
            // Must be a member to read or create posts.
            allow read, create: if exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
            allow update, delete: if isOwner(resource.data.authorRef) || isOwner(get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId);
        }
    }
    
    // =============================================================
    // Farm & Traceability
    // =============================================================
     match /farms/{farmId} {
        allow read, write: if isOwner(resource.data.ownerId);
     }
     
     match /crops/{cropId} {
        allow read, write: if isOwner(resource.data.ownerId);
     }
     
     match /knf_batches/{batchId} {
         allow read, write: if isOwner(resource.data.userId);
     }
     
     // Public can read, only system/owner can write.
     match /vti_registry/{vtiId} {
        allow read: if true;
        allow write: if false; // All writes must go through backend functions.
     }
     
     match /traceability_events/{eventId} {
        allow read: if true;
        allow write: if false; // All writes must go through backend functions.
     }

    // =============================================================
    // Agri-Events
    // =============================================================
    match /agri_events/{eventId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.organizerId) || isAdmin();
        
        match /attendees/{userId} {
            // Users can only register themselves. Organizers can read the list.
            allow read: if isOwner(userId) || isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
            allow write: if isOwner(userId); // For self-registration/cancellation
        }
        match /staff/{userId} {
            allow read, write: if isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
        }
        match /coupons/{couponId} {
            allow read, write: if isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
        }
    }
     
    // =============================================================
    // Knowledge Hub
    // =============================================================
    match /knowledge_articles/{articleId} {
        allow read: if true;
        // Allow write only for admins/curators
        allow write: if isAdmin();
    }
    match /knowledge_base/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // =============================================================
    // Financial & Other Services
    // =============================================================
    match /financial_transactions/{txId} {
        allow read, write: if isOwner(resource.data.userRef.id);
    }
    match /financial_products/{prodId} {
        allow read: if true;
        allow write: if isOwner(resource.data.fiId);
    }
    match /financial_applications/{appId} {
        allow read: if isSignedIn() && (isOwner(resource.data.applicantId) || isOwner(resource.data.fiId));
        allow create: if isSignedIn();
        allow update: if isOwner(resource.data.fiId);
    }
    
    match /insurance_products/{prodId} {
        allow read: if true;
        allow write: if isOwner(resource.data.providerId);
    }
    
    match /insurance_applications/{appId} {
        allow read: if isSignedIn() && (isOwner(resource.data.applicantId) || isOwner(resource.data.providerId));
        allow create: if isSignedIn();
        allow update: if isOwner(resource.data.providerId);
    }

    // =============================================================
    // System & Logging Collections (Generally backend-only access)
    // =============================================================
    match /offline_changes_log/{changeId} {
      allow read, write: if false; // Only backend access
    }
    match /profile_views/{viewId} {
        allow read, write: if false; // Only backend access
    }
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create, delete: if false;
    }
    match /credit_scores/{userId} {
        allow read: if isOwner(userId);
        allow write: if false;
    }
     match /recovery_sessions/{sessionId} {
      allow read, write: if false; // Only backend access
    }
  }
}
