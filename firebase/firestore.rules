
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProfileOwner(profileId) {
      return isSignedIn() && request.auth.uid == profileId;
    }
    
    // =================================
    // User Profiles & Related
    // =================================
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if true;
      
      // Only the user themselves can update their profile.
      // Creation is handled by a secure Cloud Function on sign-up.
      allow update: if isProfileOwner(userId);
      
      // Nobody can delete user profiles directly. This should be a backend process.
      allow delete: if false;
      allow create: if isSignedIn(); // Allow create on first profile setup

      // Sub-collections for a user
      match /workers/{workerId} {
        allow read, write: if isProfileOwner(userId);
      }
      match /workers/{workerId}/work_logs/{logId} {
         allow read, write: if isProfileOwner(userId);
      }
       match /workers/{workerId}/payments/{paymentId} {
         allow read, write: if isProfileOwner(userId);
      }
    }
    
    match /profile_views/{viewId} {
      // Only authenticated users can log that they've viewed a profile
      allow create: if isSignedIn();
      allow read, update, delete: if false; // Only server should read/manage
    }
    
    match /connection_requests/{requestId} {
      allow create: if isSignedIn();
      // Only the recipient can update (accept/decline) the request
      allow update: if isSignedIn() && request.auth.uid == resource.data.recipientId;
      allow read, delete: if isSignedIn(); // Allow involved parties to read/delete
    }
    
    // =================================
    // Marketplace & E-commerce
    // =================================
    match /marketplaceItems/{itemId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.sellerId);
      allow delete: if isSignedIn() && isOwner(resource.data.sellerId);
    }
    
    match /marketplace_orders/{orderId} {
        // Only involved parties can read an order.
        allow read: if isSignedIn() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
        // Only a signed-in user can create an order for themselves.
        allow create: if isSignedIn() && isOwner(request.resource.data.buyerId);
        // Only the seller can update the order status.
        allow update: if isSignedIn() && isOwner(resource.data.sellerId);
        allow delete: if false; // Orders should not be deleted, but cancelled.
    }
    
    match /marketplace_coupons/{couponId} {
        // Public can read to validate, but only owner can manage
        allow read: if true; 
        allow create, update, delete: if isSignedIn() && isOwner(request.resource.data.sellerId);
    }
    
     match /shops/{shopId} {
      allow read: if true;
      allow create, update: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    
    // =================================
    // Community & Social
    // =================================
    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId);
      
      match /likes/{userId} {
        allow read: if true;
        // A user can only like/unlike for themselves.
        allow create, delete: if isProfileOwner(userId);
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isOwner(resource.data.userId);
      }
    }
    
    match /forums/{topicId} {
      allow read: if true;
      allow create: if isSignedIn();
      // Future: Only allow admins or topic creator to update topic info
      allow update, delete: if isSignedIn(); 
      
      match /posts/{postId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isOwner(resource.data.authorRef);
        
        match /replies/{replyId} {
           allow read: if true;
           allow create: if isSignedIn();
           allow update, delete: if isSignedIn() && isOwner(resource.data.authorRef);
        }
      }
    }
    
    match /groups/{groupId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isOwner(resource.data.ownerId);
        
        match /members/{userId} {
          allow read: if true;
          // Allow any signed-in user to join/leave (create/delete their own membership doc)
          allow create, delete: if isProfileOwner(userId);
        }
        
        match /posts/{postId} {
          // Must be a member to read/create group posts
          allow read, create: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
          // Only author can edit/delete
          allow update, delete: if isSignedIn() && isOwner(resource.data.authorRef);
          
           match /replies/{replyId} {
            // Must be a member to read/create replies
            allow read, create: if isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
            allow update, delete: if isSignedIn() && isOwner(resource.data.authorRef);
           }
        }
    }
    
    // =================================
    // Agri-Events
    // =================================
    match /agri_events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isOwner(resource.data.organizerId);
      
      match /attendees/{attendeeId} {
          allow read: if isSignedIn(); // Organizers or other attendees can see who is going
          allow create: if isProfileOwner(attendeeId); // Only you can register yourself
          allow delete: if isProfileOwner(attendeeId); // You can un-register
          // Check-in updates handled by cloud function
          allow update: if isSignedIn() && isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
      }
      
      match /coupons/{couponId} {
          allow read, write: if isSignedIn() && isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
      }
      
      match /staff/{staffId} {
          allow read: if true;
          allow write: if isSignedIn() && isOwner(get(/databases/$(database)/documents/agri_events/$(eventId)).data.organizerId);
      }
    }
    
    // =================================
    // Farm & Traceability
    // =================================
    match /farms/{farmId} {
        allow read, write: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    match /crops/{cropId} {
         allow read, write: if isSignedIn() && isOwner(resource.data.ownerId);
    }
    match /knf_batches/{batchId} {
         allow read, write: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /vti_registry/{vtiId} {
        // Public can read, but only backend can write
        allow read: if true;
        allow write: if false; 
    }
    
    match /traceability_events/{eventId} {
        // Public can read, but only backend can write
        allow read: if true;
        allow write: if false;
    }
    
    // =================================
    // Misc & System Collections
    // =================================
    match /knowledge_base/{docId} {
      allow read: if true;
      allow write: if false; // Only manageable via Admin SDK
    }
    
    match /knowledge_articles/{articleId} {
        allow read: if true;
        allow write: if false; // Managed by cloud function/admin
    }

    match /conversations/{convoId} {
        // Only participants can read/write to a conversation
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        
        match /messages/{messageId} {
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(convoId)).data.participantIds;
        }
    }

    match /offline_changes_log/{changeId} {
      // Nobody on the client can read these. Only backend function can process.
      allow read, write: if false;
    }

    match /search_index/{docId} {
      // Search index should be read-only for clients
      allow read: if true;
      allow write: if false;
    }

    // Default deny for any collection not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    