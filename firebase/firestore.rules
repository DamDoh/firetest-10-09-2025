
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all reads and writes to any collection not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow any authenticated user to read the knowledge base.
    match /knowledge_base/{docId} {
      allow read: if request.auth != null;
      // Only allow users with an 'admin' or 'curator' custom claim to write.
      // This is a secure default for production.
      allow write: if request.auth.token.admin == true || request.auth.token.curator == true;
    }

    // Add rules for other existing collections to prevent the app from breaking.
    // These are basic rules; a production app would need more granular control.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /marketplaceItems/{itemId} {
      allow read: if true; // Publicly readable
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    match /marketplaceItems/{itemId}/{subcollection}/{docId} {
        allow read, write: if request.auth != null; // e.g. for bookings/staff
    }
    
    match /marketplace_orders/{orderId} {
        allow read, update: if request.auth.uid == resource.data.sellerId || request.auth.uid == resource.data.buyerId;
        allow create: if request.auth.uid != null;
    }

    match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /posts/{postId}/{subcollection}/{docId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
    }
    
    match /forums/{topicId} {
        allow read: if true;
        allow create: if request.auth != null;
    }
    
    match /forums/{topicId}/{subcollection=**} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    match /groups/{groupId} {
        allow read: if true;
        allow create, update: if request.auth != null;
    }
    
     match /groups/{groupId}/{subcollection=**} {
      allow read, write: if request.auth != null; // Simplified for demo
    }

    match /conversations/{convoId} {
        allow read, write: if request.auth.uid in resource.data.participantIds;
    }
    
    match /conversations/{convoId}/{subcollection=**} {
         allow read, write: if request.auth != null; // More complex check needed in production
    }

    match /notifications/{notifId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /profile_views/{viewId} {
        allow create: if request.auth != null;
    }
    
     match /agri_events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.organizerId;
    }
    
    match /agri_events/{eventId}/{subcollection=**} {
      allow read, write: if request.auth != null; // Simplified
    }
  }
}
