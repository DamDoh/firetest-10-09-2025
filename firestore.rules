
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user has one of the specified roles.
    function hasRole(roles) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(roles);
    }
    
    // Checks if incoming data for a write request contains all required keys.
    function hasAllKeys(keys) {
      return request.resource.data.keys().hasAll(keys);
    }
    
    // --- Default Deny Rule ---
    // Security Best Practice: By default, deny all access. Specific rules below will grant access.
    match /{document=**} {
      allow read, write: if false;
    }

    // =================================
    //  Core User & System Collections
    // =================================

    match /users/{userId} {
      // Authenticated users can read public profiles, but not sensitive fields.
      // This will be complemented by stripping sensitive data in Cloud Functions.
      allow read: if isAuthenticated();
      // A user can create their own profile.
      allow create: if isOwner(userId);
      // A user can only update their own profile, and cannot change their role.
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role;
      // Users cannot delete their profiles directly; this must be done via a Cloud Function.
      allow delete: if false;
    }

    match /search_index/{docId} {
      // The search index is read-only for all authenticated clients.
      allow read: if isAuthenticated();
      // Writes are handled exclusively by the `onSourceDocumentWriteIndex` Cloud Function.
      allow write: if false;
    }

    match /notifications/{notificationId} {
      // A user can only access their own notifications.
      allow read, write, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /vti_registry/{vtiId} {
        // VTI data is public and immutable from the client-side.
        allow read: if true;
        allow write: if false; // All traceability events are logged via secure Cloud Functions.
    }

    // =================================
    //  Marketplace
    // =================================

    match /marketplaceItems/{listingId} {
      // Anyone can read marketplace listings.
      allow read: if true;
      // Any authenticated user can create a listing, provided it has the correct schema.
      allow create: if isAuthenticated() && hasAllKeys(['sellerId', 'name', 'price', 'listingType']);
      // Only the seller can update their listing, and they cannot change the sellerId.
      allow update: if isOwner(resource.data.sellerId) && request.resource.data.sellerId == resource.data.sellerId;
      // Only the seller can delete their listing.
      allow delete: if isOwner(resource.data.sellerId);
    }

    match /marketplace_orders/{orderId} {
      // Only the buyer or seller can read an order. Admins can also read orders.
      allow read: if isOwner(resource.data.buyerId) || isOwner(resource.data.sellerId) || hasRole(['admin']);
      // Orders are created and updated by backend functions, not directly by clients.
      allow write: if false;
    }

    // =================================
    //  Farm Management
    // =================================

    match /farms/{farmId} {
      // A user can manage their own farm documents.
      allow create: if isOwner(request.resource.data.owner_id);
      allow read, update, delete: if isOwner(resource.data.owner_id);
    }

    match /crops/{cropId} {
       // A user can manage their own crop documents.
      allow create: if isOwner(request.resource.data.owner_id);
      allow read, update, delete: if isOwner(resource.data.owner_id);
    }

    // =================================
    //  Community (Forums & Groups)
    // =================================

    match /forums/{topicId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Only the creator or a moderator/admin can update or delete a topic.
      allow update, delete: if isOwner(resource.data.createdBy) || hasRole(['moderator', 'admin']);
    }

    match /forums/{topicId}/posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Only the author or a moderator/admin can update or delete a post.
      allow update, delete: if isOwner(resource.data.authorRef) || hasRole(['moderator', 'admin']);
    }

    match /groups/{groupId} {
      // Allow read if the group is public, or if the user is a member (future).
      allow read: if resource.data.isPublic == true || isAuthenticated(); // Simplified for now
      allow create: if isAuthenticated();
      // Only the owner or an admin can update or delete a group.
      allow update, delete: if isOwner(resource.data.ownerId) || hasRole(['admin']);
    }

    // =================================
    //  Read-Only / Backend-Managed
    // =================================

    match /knowledge_base/{docId} {
      // Knowledge base is read-only for authenticated users.
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
}
