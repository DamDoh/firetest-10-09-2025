

{
  "FeedItemCard": {
    "editPost": "Editar Publicación",
    "deletePost": "Eliminar Publicación",
    "repostPlaceholderToast": "Acción de republicar activada (marcador de posición).",
    "signInToLikeToast": "Por favor, inicie sesión para dar me gusta a una publicación.",
    "signInToVoteToast": "Por favor, inicie sesión para votar.",
    "voteSuccessToast": "¡Voto registrado con éxito!",
    "voteErrorToast": "Error al votar",
    "loadCommentsErrorToast": "Error al cargar comentarios",
    "noComments": "Aún no hay comentarios.",
    "loadingComments": "Cargando comentarios...",
    "loadMoreComments": "Cargar más comentarios",
    "writeCommentPlaceholder": "Escribe un comentario...",
    "postButton": "Publicar",
    "like": "Me gusta",
    "comment": "Comentar",
    "repost": "Republicar",
    "likes": "{count, plural, one {Me gusta} other {Me gusta}}",
    "comments": "{count, plural, one {Comentario} other {Comentarios}}",
    "votes": "{count, plural, one {voto} other {votos}}"
  },
  "CreatePostModal": {
    "title": "Crear Publicación",
    "description": "Comparte una actualización con tu comunidad.",
    "yourName": "Tu Nombre",
    "shareUpdate": "Comparte una actualización",
    "placeholder": "¿Qué tienes en mente?",
    "selectedFile": "Archivo seleccionado:",
    "pollOptionsLabel": "Opciones de la encuesta",
    "pollOptionPlaceholder": "Opción {{index}}",
    "addOptionButton": "Agregar opción",
    "pollNote": "Máximo de {{maxOptions}} opciones.",
    "addMediaButton": "Agregar Foto/Video",
    "createEventButton": "Crear Evento Agrícola",
    "shareDocumentButton": "Compartir Documento",
    "createPollButton": "Crear Encuesta",
    "postButton": "Publicar",
    "pollOptionsError": "Una encuesta debe tener al menos dos opciones.",
    "emptyPostError": "Una publicación no puede estar vacía."
  },
  "StartPost": {
    "placeholder": "Inicia una publicación, crea una encuesta o comparte un documento...",
    "photoVideo": "Foto/Video",
    "agriEvent": "Evento Agrícola",
    "createPoll": "Crear Encuesta"
  },
  "myNetworkPage": {
    "backLink": "Volver a la Red",
    "myConnectionsTab": "Mis Conexiones ({count})",
    "pendingRequestsTab": "Solicitudes Pendientes",
    "connectionsTitle": "Mis Conexiones",
    "connectionsDescription": "Ver y gestionar tus conexiones actuales.",
    "noConnections": "Aún no has hecho ninguna conexión. ¡Empieza explorando la red!",
    "requestsTitle": "Solicitudes de Conexión",
    "requestsDescription": "Aceptar o rechazar solicitudes para conectar.",
    "noRequests": "No tienes solicitudes de conexión pendientes.",
    "sentTimeAgo": "Enviado hace {timeAgo}"
  },
  "networkPage": {
    "title": "Mi Red Profesional",
    "description": "Descubre y conecta con actores de toda la cadena de suministro agrícola.",
    "myNetworkButton": "Mi Red",
    "agentToolsButton": "Herramientas de Agente",
    "aiSuggestionsTitle": "Sugerencias con IA",
    "aiSuggestionsDescription": "Basado en tu perfil, aquí tienes algunos actores con los que podrías querer conectar.",
    "connect": "Conectar",
    "profile": "Perfil",
    "browseAllTitle": "Explorar Todos los Actores",
    "browseAllDescription": "Encuentra las personas y empresas adecuadas para hacer crecer tu red.",
    "searchPlaceholder": "Buscar por nombre, rol o interés...",
    "locationPlaceholder": "Filtrar por ubicación...",
    "rolePlaceholder": "Filtrar por rol...",
    "allRoles": "Todos los roles",
    "noStakeholdersFound": "No se encontraron actores.",
    "noStakeholdersHint": "Intenta ajustar tu búsqueda o filtros.",
    "noSuggestions": "No hay nuevas sugerencias para ti en este momento. Intenta completar tu perfil para obtener mejores recomendaciones.",
    "toast": {
      "errorTitle": "Error",
      "loadError": "No se pudieron cargar los datos de la red."
    }
  },
  "farmManagement": {
    "hub": {
      "title": "Centro de Gestión Agrícola",
      "description": "Su lugar central para gestionar todas las operaciones agrícolas, desde ciclos de cultivo e insumos KNF hasta mano de obra y finanzas.",
      "myFarms": {
        "title": "Mis Granjas y Cultivos",
        "description": "Ver y gestionar sus granjas, parcelas y ciclos de cultivo activos.",
        "button": "Gestionar Granjas"
      },
      "labor": {
        "title": "Gestión de Mano de Obra",
        "description": "Realice un seguimiento de su fuerza laboral, registre horas y gestione pagos.",
        "button": "Gestionar Mano de Obra"
      },
      "knf": {
        "title": "Asistente de Insumos KNF",
        "description": "Cree y realice un seguimiento de sus lotes de insumos de Agricultura Natural Coreana.",
        "button": "Gestionar Insumos"
      },
      "fgw": {
        "title": "Guía de Campo de FGW",
        "description": "Aprenda y aplique los principios básicos de la Agricultura a la Manera de Dios.",
        "button": "Ver Guía"
      },
      "financials": {
        "title": "Asuntos de Dinero",
        "description": "Realice un seguimiento de ingresos, gastos y solicite productos financieros.",
        "button": "Ver Finanzas"
      },
      "seedStarting": {
        "title": "Guía de Inicio de Semillas",
        "description": "Planifique su temporada de siembra con nuestra completa guía de inicio de semillas.",
        "button": "Ver Guía"
      },
      "familyFarm": {
        "title": "Granja Familiar de 200m²",
        "description": "Explore el modelo integrado para una granja familiar sostenible de 200m².",
        "button": "Ver Modelo"
      },
      "assetManagement": {
        "title": "Gestión de Activos",
        "description": "Gestione su equipo, herramientas y otros activos agrícolas (Próximamente).",
        "button": "Gestionar Activos"
      }
    },
    "laborPage": {
      "loading": "Cargando...",
      "backLink": "Volver a Gestión Agrícola",
      "title": "Gestión de Mano de Obra",
      "description": "Gestione su fuerza laboral, realice un seguimiento de las horas y registre los pagos.",
      "addWorker": "Añadir Trabajador",
      "workerName": "Nombre del Trabajador",
      "saveWorker": "Guardar Trabajador",
      "hoursLogged": "Horas Registradas",
      "totalPaid": "Total Pagado",
      "logHours": "Registrar Horas",
      "logPayment": "Registrar Pago",
      "viewDetails": "Ver Detalles",
      "noWorkers": "Aún no se han añadido trabajadores.",
      "logHoursFor": "Registrar Horas para",
      "hoursWorked": "Horas Trabajadas",
      "date": "Fecha",
      "pickDate": "Seleccionar una fecha",
      "taskDescription": "Descripción de la Tarea",
      "logPaymentFor": "Registrar Pago para",
      "amountPaid": "Monto Pagado",
      "signInPrompt": {
        "title": "Por favor, inicie sesión",
        "description": "Debe iniciar sesión para gestionar la mano de obra de su granja.",
        "button": "Iniciar Sesión"
      },
      "toast": {
        "errorTitle": "Error",
        "fetchWorkersError": "No se pudieron obtener los datos de los trabajadores.",
        "nameRequired": "Se requiere el nombre del trabajador.",
        "workerAdded": "¡Trabajador añadido con éxito!",
        "hoursLogged": "¡Horas registradas con éxito!",
        "paymentLoggedTitle": "¡Pago Registrado!",
        "paymentLoggedDescription": "El pago ha sido registrado y se ha creado un asiento de gastos en sus finanzas."
      },
      "workerDetailPage": {
        "backLink": "Volver a Gestión de Mano de Obra",
        "notFoundTitle": "Trabajador No Encontrado",
        "notFoundDescription": "El perfil del trabajador que busca no existe.",
        "goBackButton": "Volver",
        "workLogsTitle": "Registros de Trabajo",
        "paymentHistoryTitle": "Historial de Pagos",
        "table": {
          "date": "Fecha",
          "hours": "Horas",
          "task": "Tarea",
          "amount": "Monto"
        },
        "noWorkLogs": "No se ha registrado ningún trabajo para este trabajador.",
        "noPayments": "No se han registrado pagos para este trabajador.",
        "toasts": {
          "errorTitle": "Error al obtener detalles",
          "errorDescription": "No se pudieron cargar los detalles de este trabajador."
        }
      }
    }
  },
  "talentExchangePage": {
    "title": "Bolsa de Talentos",
    "description": "Encuentre profesionales y servicios calificados, o publique su propia experiencia.",
    "listServiceButton": "Ofrecer su Servicio",
    "searchPlaceholder": "Buscar habilidades o servicios...",
    "locationPlaceholder": "Filtrar por ubicación...",
    "categoryPlaceholder": "Filtrar por categoría...",
    "allCategories": "Todas las categorías",
    "noResultsTitle": "No se encontraron servicios",
    "noResultsDescription": "Intente ajustar sus términos de búsqueda o filtros. ¡Quizás haya una oportunidad para que usted sea el primero en ofrecer este servicio!",
    "toast": {
      "error": {
        "title": "Error",
        "description": "No se pudieron obtener los servicios. Por favor, inténtelo de nuevo más tarde."
      }
    }
  },
  "sustainabilityPage": {
    "title": "Centro de Sostenibilidad",
    "description": "Rastrea y gestiona el impacto ambiental y las prácticas sostenibles de tu granja.",
    "auth": {
      "title": "Por favor, inicia sesión",
      "description": "Debes iniciar sesión para ver tu centro de sostenibilidad.",
      "button": "Iniciar sesión"
    },
    "noData": {
      "title": "No hay datos disponibles",
      "description": "No pudimos cargar tus datos de sostenibilidad. Por favor, inténtalo de nuevo más tarde."
    },
    "metricCard": {
      "trendText": "desde el mes pasado"
    },
    "carbonFootprint": "Huella de Carbono",
    "waterEfficiency": "Eficiencia del Agua",
    "biodiversityScore": "Puntuación de Biodiversidad",
    "practicesTitle": "Prácticas Sostenibles Registradas",
    "practicesTable": {
      "practice": "Práctica",
      "lastLogged": "Último Registro"
    },
    "certificationsTitle": "Certificaciones",
    "certificationsTable": {
      "certification": "Certificación",
      "status": "Estado",
      "expiry": "Vencimiento"
    }
  },
  "InsuranceProviderDashboard": {
    "title": "Panel del Proveedor de Seguros"
  },
  "InsuranceProductsPage": {
    "backLink": "Volver a Productos de Seguro",
    "title": "Mis Productos de Seguro",
    "description": "Ver y gestionar sus productos de seguro listados.",
    "createButton": "Crear Nuevo Producto",
    "noProducts": "Aún no ha creado ningún producto de seguro.",
    "table": {
      "productName": "Nombre del Producto",
      "type": "Tipo",
      "status": "Estado",
      "premium": "Prima"
    },
    "toast": {
      "errorTitle": "Error",
      "fetchError": "No se pudieron obtener sus productos de seguro."
    }
  },
  "InsuranceProductCreatePage": {
    "backLink": "Volver a Productos",
    "title": "Crear Producto de Seguro",
    "description": "Definir un nuevo producto de seguro para ofrecer a los agricultores.",
    "form": {
      "nameLabel": "Nombre del Producto",
      "namePlaceholder": "ej., Seguro de Cultivos de Riesgo Múltiple",
      "typeLabel": "Tipo de Producto",
      "typePlaceholder": "Seleccione un tipo",
      "crop": "Cultivo",
      "livestock": "Ganado",
      "asset": "Activo",
      "weather": "Climático (Paramétrico)",
      "descriptionLabel": "Breve Descripción",
      "descriptionPlaceholder": "Describa brevemente este producto.",
      "coverageLabel": "Detalles de la Cobertura",
      "coveragePlaceholder": "Describa en detalle lo que cubre esta póliza...",
      "premiumLabel": "Prima",
      "premiumPlaceholder": "ej., 250",
      "currencyLabel": "Moneda",
      "submitButton": "Crear Producto"
    },
    "toast": {
      "notAuthenticated": "Debe iniciar sesión para crear un producto.",
      "successTitle": "¡Producto Creado!",
      "successDescription": "{{name}} ha sido creado con éxito.",
      "errorTitle": "Creación Fallida"
    }
  },
  "FiDashboard": {
    "title": "Panel de la Institución Financiera",
    "pendingApplicationsTitle": "Solicitudes Pendientes",
    "pendingApplicationsDescription": "Solicitudes de préstamos y subvenciones que requieren su revisión.",
    "manageApplicationsButton": "Gestionar Solicitudes",
    "portfolioAtRiskTitle": "Cartera en Riesgo",
    "portfolioAtRiskDescription": "{{count}} préstamos muestran indicadores de alto riesgo.",
    "reviewRiskButton": "Revisar Riesgo",
    "manageProductsTitle": "Productos Financieros",
    "manageProductsDescription": "Gestionar los productos de préstamos y subvenciones disponibles.",
    "manageProductsButton": "Gestionar Productos",
    "table": {
      "applicant": "Solicitante",
      "type": "Tipo",
      "amount": "Monto",
      "riskScore": "Puntuación de Riesgo",
      "action": "Acción"
    },
    "reviewButton": "Revisar",
    "noApplications": "No hay solicitudes pendientes en este momento.",
    "viewAllButton": "Ver todas las solicitudes"
  },
  "FiApplicationListPage": {
    "backLink": "Volver al Panel",
    "title": "Solicitudes Financieras",
    "description": "Ver y gestionar todas las solicitudes de préstamos y subvenciones.",
    "tabs": {
      "all": "Todas",
      "pending": "Pendientes",
      "approved": "Aprobadas",
      "rejected": "Rechazadas"
    },
    "table": {
      "applicant": "Solicitante",
      "type": "Tipo",
      "amount": "Monto",
      "date": "Fecha de Envío",
      "status": "Estado",
      "action": "Acción"
    },
    "reviewButton": "Revisar",
    "noApplications": "No se encontraron solicitudes que coincidan con este filtro."
  },
  "FiApplicationPage": {
    "backLink": "Volver a Solicitudes",
    "title": "Detalle de la Solicitud",
    "applicationTitle": "Solicitud",
    "submittedOn": "Enviado el",
    "amountRequested": "Monto Solicitado",
    "purpose": "Propósito de la Financiación",
    "approveButton": "Aprobar",
    "rejectButton": "Rechazar",
    "requestInfoButton": "Solicitar más información",
    "applicantDetails": "Detalles del Solicitante",
    "viewProfileButton": "Ver Perfil Completo",
    "profileNotFound": "No se encontró el perfil del solicitante.",
    "riskAssessment": "Evaluación de Riesgos",
    "creditScore": "Puntuación de Crédito DamDoh",
    "notFound": "Solicitud no encontrada.",
    "toast": {
      "errorTitle": "Error",
      "updateSuccessTitle": "¡Estado Actualizado!",
      "updateSuccessDescription": "El estado de la solicitud ha sido actualizado a {{status}}.",
      "updateFailTitle": "Actualización Fallida"
    }
  },
  "FiProductsPage": {
    "backLink": "Volver al Panel",
    "title": "Mis Productos Financieros",
    "description": "Ver y gestionar sus productos financieros listados.",
    "createButton": "Crear Nuevo Producto",
    "noProducts": "Aún no ha creado ningún producto financiero.",
    "table": {
      "productName": "Nombre del Producto",
      "type": "Tipo",
      "status": "Estado",
      "interestRate": "Tasa de Interés",
      "maxAmount": "Monto Máximo"
    },
    "toast": {
      "errorTitle": "Error",
      "fetchError": "No se pudieron obtener sus productos financieros."
    }
  },
  "FiProductCreatePage": {
    "backLink": "Volver a Productos",
    "title": "Crear Producto Financiero",
    "description": "Definir un nuevo producto de préstamo o subvención para ofrecer en la plataforma.",
    "form": {
      "nameLabel": "Nombre del Producto",
      "namePlaceholder": "ej., Préstamo para Semillas de Temporada",
      "typeLabel": "Tipo de Producto",
      "loan": "Préstamo",
      "grant": "Subvención",
      "descriptionLabel": "Descripción",
      "descriptionPlaceholder": "Describa brevemente este producto y sus beneficios.",
      "interestRateLabel": "Tasa de Interés (%)",
      "interestRatePlaceholder": "ej., 12.5",
      "maxAmountLabel": "Monto Máximo (USD)",
      "maxAmountPlaceholder": "ej., 10000",
      "targetRolesLabel": "Roles Objetivo",
      "targetRolesDescription": "Seleccione los roles que son elegibles para este producto.",
      "submitButton": "Crear Producto"
    },
    "toast": {
      "notAuthenticated": "Debe iniciar sesión para crear un producto.",
      "successTitle": "¡Producto Creado!",
      "successDescription": "{{name}} ha sido creado con éxito.",
      "errorTitle": "Creación Fallida"
    }
  }
}

```
- src/messages/zh.json:
```json

{
  "AgriEvents": {
    "page": {
      "noEventsHint": {
        "link": "create one"
      }
    }
  }
}

```
- src/i18n-config.ts:
```ts

export const locales = ['en', 'fr', 'de', 'km', 'es', 'zh', 'ja', 'pt', 'ru', 'hi', 'id', 'ar', 'tr', 'ms'] as const;

export const localeNames: Record<typeof locales[number], string> = {
  en: "English",
  fr: "Français",
  de: "Deutsch",
  km: "ភាសាខ្មែរ",
  es: "Español",
  zh: "中文",
  ja: "日本語",
  pt: "Português",
  ru: "Русский",
  hi: "हिन्दी",
  id: "Bahasa Indonesia",
  ar: "العربية",
  tr: "Türkçe",
  ms: "Bahasa Melayu"
};

```
- src/middleware.ts:
```ts

import createMiddleware from 'next-intl/middleware';
import { locales } from './i18n-config';

const defaultLocale = 'en';
 
export default createMiddleware({
  // A list of all locales that are supported
  locales: locales,
 
  // Used when no locale matches
  defaultLocale: defaultLocale,
  localePrefix: 'as-needed' 
});
 
export const config = {
  // Match all pathnames except for
  // - … if they start with `/api`, `/_next` or `/_vercel`
  // - … the ones containing a dot (e.g. `favicon.ico`)
  matcher: ['/((?!api|_next|_vercel|.*\\..*).*)']
};

```
- src/i18n.ts:
```ts

import {notFound} from 'next/navigation';
import {getRequestConfig} from 'next-intl/server';
import {locales} from './i18n-config';
 
export default getRequestConfig(async ({locale}) => {
  // Validate that the incoming `locale` parameter is valid
  if (!locales.includes(locale as any)) notFound();
 
  let messages;
  try {
    // The `default` is important here because of how JSON files are imported
    messages = (await import(`./messages/${locale}.json`)).default;
  } catch (error) {
    // This will trigger a 404 if the message file for a valid locale is not found
    // This prevents a server crash if a file is missing.
    notFound();
  }

  return {
    locale,
    messages
  };
});

```
- src/navigation.ts:
```ts

import {createLocalizedPathnamesNavigation} from 'next-intl/navigation';
import {locales} from './i18n-config';

export const {Link, redirect, usePathname, useRouter} =
  createLocalizedPathnamesNavigation({
    locales,
    // No path-specific translations for now
    pathnames: {},
  });

```
- src/lib/form-schemas.ts:
```ts


import { z } from "zod";
import { UNIFIED_MARKETPLACE_CATEGORY_IDS, LISTING_TYPES, AGRI_EVENT_TYPES, STAKEHOLDER_ROLES } from "@/lib/constants";

const MAX_FILE_SIZE_MB = 5;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;
const ACCEPTED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png", "image/webp"];

const imageFileSchema = z
  .instanceof(File, { message: "Please upload a file." })
  .optional()
  .refine(
    (file) => !file || file.size <= MAX_FILE_SIZE_BYTES,
    `Max image size is ${MAX_FILE_SIZE_MB}MB.`
  )
  .refine(
    (file) => !file || ACCEPTED_IMAGE_TYPES.includes(file.type),
    "Only .jpg, .jpeg, .png and .webp formats are accepted."
  );

export const createMarketplaceItemSchema = z.object({
  name: z.string().min(3, "Name must be at least 3 characters long.").max(100, "Name cannot exceed 100 characters."),
  listingType: z.enum(LISTING_TYPES, {
    errorMap: () => ({ message: "Please select a listing type (Product or Service)." }),
  }),
  description: z.string().min(10, "Description must be at least 10 characters long.").max(2000, "Description cannot exceed 2000 characters."),
  price: z.coerce.number({ invalid_type_error: "Price must be a number." }).min(0, "Price cannot be negative.").optional(),
  currency: z.string().length(3, "Currency must be a 3-letter code.").default("USD").transform(value => value.toUpperCase()),
  perUnit: z.string().max(30, "Unit description (e.g., /kg, /ton, /hour) is too long.").optional(),
  category: z.enum(UNIFIED_MARKETPLACE_CATEGORY_IDS, {
    errorMap: () => ({ message: "Please select a valid category." }),
  }),
  isSustainable: z.boolean().default(false).optional(),
  location: z.string().min(2, "Location must be at least 2 characters long.").max(100, "Location cannot exceed 100 characters."),
  imageUrl: z.string().url({ message: "Please enter a valid URL for the image (e.g., https://placehold.co/300x200.png)." }).optional().or(z.literal('')),
  imageFile: imageFileSchema,
  contactInfo: z.string().min(5, "Contact information must be at least 5 characters long.").max(200, "Contact information cannot exceed 200 characters.").optional(),
  skillsRequired: z.string().max(250, "Skills list is too long (max 250 chars).").optional().describe("For services: Enter skills, comma-separated"),
  compensation: z.string().max(100, "Compensation details are too long (max 100 chars).").optional().describe("For services: e.g., $50/hr, Project-based"),
   // Fields from extended schema, made optional for the form
  brand: z.string().max(50, "Brand name is too long.").optional(),
  condition: z.enum(['New', 'Used', 'Refurbished']).optional(),
  availabilityStatus: z.enum(['Available', 'Booking Required', 'Limited Availability']).optional(),
  certifications: z.string().max(500, "Certifications list is too long.").optional(),
  relatedTraceabilityId: z.string().max(100, "Traceability ID is too long.").optional(),
  experienceLevel: z.string().optional(),
});

export type CreateMarketplaceItemValues = z.infer<typeof createMarketplaceItemSchema>;


export const createForumTopicSchema = z.object({
  title: z.string().min(10, "Title must be at least 10 characters long.").max(150, "Title cannot exceed 150 characters."),
  description: z.string().min(20, "Description must be at least 20 characters long.").max(2000, "Description cannot exceed 2000 characters."),
});

export type CreateForumTopicValues = z.infer<typeof createForumTopicSchema>;

export const createAgriEventSchema = z.object({
  title: z.string().min(5, "Event title must be at least 5 characters.").max(100, "Event title cannot exceed 100 characters."),
  description: z.string().min(20, "Event description must be at least 20 characters.").max(2000, "Event description cannot exceed 2000 characters."),
  eventDate: z.date({
    required_error: "Event date is required.",
    invalid_type_error: "That's not a valid date!",
  }),
  eventTime: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/, "Please enter a valid time in HH:MM format (e.g., 14:30).").optional().or(z.literal('')),
  location: z.string().min(3, "Location must be at least 3 characters.").max(150, "Location cannot exceed 150 characters."),
  eventType: z.enum(AGRI_EVENT_TYPES, {
    errorMap: () => ({ message: "Please select a valid event type." }),
  }),
  organizer: z.string().max(100, "Organizer name cannot exceed 100 characters.").optional(),
  websiteLink: z.string().url({ message: "Please enter a valid URL for the event website." }).optional().or(z.literal('')),
  imageUrl: z.string().url({ message: "Please enter a valid URL for the event image." }).optional().or(z.literal('')),
  imageFile: imageFileSchema,
  registrationEnabled: z.boolean().default(false).optional(),
  attendeeLimit: z.coerce.number().int().positive("Must be a positive number.").optional(),
  price: z.coerce.number().min(0, "Price cannot be negative.").optional(),
  currency: z.string().length(3, "Currency must be a 3-letter code.").optional(),
});

export type CreateAgriEventValues = z.infer<typeof createAgriEventSchema>;

export const createFarmSchema = z.object({
  name: z.string().min(3, "Farm name must be at least 3 characters.").max(100),
  description: z.string().max(500, "Description is too long.").optional(),
  location: z.string().min(3, "Please provide a location.").max(200),
  size: z.string().min(1, "Please provide the farm size.").max(100),
  farmType: z.enum(['crop', 'livestock', 'mixed', 'aquaculture', 'other'], {
    errorMap: () => ({ message: "Please select a farm type." }),
  }),
  irrigationMethods: z.string().max(200, "Irrigation methods description is too long.").optional(),
});
export type CreateFarmValues = z.infer<typeof createFarmSchema>;

export const createCropSchema = z.object({
  cropType: z.string().min(2, "Crop type must be at least 2 characters.").max(100),
  plantingDate: z.date({
    required_error: "A planting date is required.",
    invalid_type_error: "That's not a valid date!",
  }),
  harvestDate: z.date().optional(),
  expectedYield: z.string().max(50, "Expected yield description is too long.").optional(),
  currentStage: z.enum(['Planting', 'Vegetative', 'Flowering', 'Fruiting', 'Harvesting', 'Post-Harvest']).optional(),
  notes: z.string().max(1000, "Notes are too long.").optional(),
});
export type CreateCropValues = z.infer<typeof createCropSchema>;

export const createHarvestSchema = z.object({
    harvestDate: z.date({ required_error: "A harvest date is required." }),
    yield_kg: z.coerce.number({ required_error: "Yield is required.", invalid_type_error: "Yield must be a number." }).min(0, "Yield cannot be negative."),
    quality_grade: z.string().max(50, "Quality grade is too long.").optional(),
    notes: z.string().max(500, "Notes are too long.").optional(),
});
export type CreateHarvestValues = z.infer<typeof createHarvestSchema>;

export const createInputApplicationSchema = z.object({
  applicationDate: z.date({ required_error: "An application date is required." }),
  inputId: z.string().min(2, "Input name/type is required."),
  quantity: z.coerce.number({ invalid_type_error: "Quantity must be a number." }).min(0, "Quantity must be a positive number."),
  unit: z.string().min(1, "Unit is required (e.g., kg, L, bags)."),
  method: z.string().max(100, "Method description is too long.").optional(),
});
export type CreateInputApplicationValues = z.infer<typeof createInputApplicationSchema>;

export const createObservationSchema = z.object({
  observationType: z.string().min(3, "Observation type is required."),
  observationDate: z.date({
    required_error: "An observation date is required.",
  }),
  details: z.string().min(10, "Details must be at least 10 characters.").max(1000, "Details cannot exceed 1000 characters."),
  imageFile: imageFileSchema.optional(),
});
export type CreateObservationValues = z.infer<typeof createObservationSchema>;

export const editProfileSchema = z.object({
  displayName: z.string().min(2, "Name must be at least 2 characters.").max(100, "Name cannot exceed 100 characters."),
  email: z.string().email("Please enter a valid email address."),
  role: z.enum(STAKEHOLDER_ROLES, {
    errorMap: () => ({ message: "Please select a valid stakeholder role."}),
  }),
  profileSummary: z.string().max(250, "Profile summary cannot exceed 250 characters.").optional(),
  bio: z.string().max(2000, "Bio cannot exceed 2000 characters.").optional(),
  location: z.string().min(2, "Location must be at least 2 characters.").max(100, "Location cannot exceed 100 characters."),
  areasOfInterest: z.string().max(500, "Areas of interest cannot exceed 500 characters (use comma-separated values).").optional(),
  needs: z.string().max(500, "Needs/offerings cannot exceed 500 characters (use comma-separated values).").optional(),
  contactInfoPhone: z.string().max(30, "Phone number is too long.").optional(),
  contactInfoWebsite: z.string().url({ message: "Please enter a valid website URL."}).optional().or(z.literal('')),
  profileData: z.any().optional(),
});

export type EditProfileValues = z.infer<typeof editProfileSchema>;

export const signInSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
  password: z.string().min(6, { message: "Password must be at least 6 characters long." }),
});
export type SignInValues = z.infer<typeof signInSchema>;


export const signUpSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }).max(100, { message: "Name cannot be longer than 100 characters." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  role: z.enum(STAKEHOLDER_ROLES, {
    errorMap: () => ({ message: "Please select a stakeholder role." }),
  }),
  password: z.string().min(6, { message: "Password must be at least 6 characters long." }),
  confirmPassword: z.string().min(6, { message: "Password must be at least 6 characters long." }),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords do not match.",
  path: ["confirmPassword"], // path of error
});

export type SignUpValues = z.infer<typeof signUpSchema>;


export const forgotPasswordSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
});

export type ForgotPasswordValues = z.infer<typeof forgotPasswordSchema>;

export const resetPasswordSchema = z.object({
  password: z.string().min(8, { message: "Password must be at least 8 characters long." }),
  confirmPassword: z.string().min(8, { message: "Password must be at least 8 characters long." }),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords do not match.",
  path: ["confirmPassword"],
});
export type ResetPasswordValues = z.infer<typeof resetPasswordSchema>;

export const logFinancialTransactionSchema = z.object({
  type: z.enum(['income', 'expense']),
  amount: z.coerce.number({ required_error: "Amount is required.", invalid_type_error: "Amount must be a number."}).min(0.01, "Amount must be positive."),
  currency: z.string().min(3, "Please select a currency.").max(3),
  description: z.string().min(3, "Description is required.").max(200, "Description is too long."),
  category: z.string().max(50, "Category is too long.").optional(),
});
export type LogFinancialTransactionValues = z.infer<typeof logFinancialTransactionSchema>;

export const createShopSchema = z.object({
  name: z.string().min(3, "Shop name must be at least 3 characters.").max(100),
  description: z.string().min(10, "Description must be at least 10 characters long.").max(1000),
  stakeholderType: z.enum(STAKEHOLDER_ROLES, {
    errorMap: () => ({ message: "Please select a valid business type."}),
  }),
});
export type CreateShopValues = z.infer<typeof createShopSchema>;

// Internationalized schema using a factory function
export const getCreateMarketplaceCouponSchema = (t: (key: string) => string) => z.object({
  code: z.string()
      .min(4, t('code.min'))
      .max(20, t('code.max'))
      .regex(/^[a-zA-Z0-9]+$/, t('code.regex')),
  discountType: z.enum(['percentage', 'fixed'], { required_error: t('discountType.required') }),
  discountValue: z.coerce.number({invalid_type_error: t('discountValue.invalid')}).positive(t('discountValue.positive')),
  expiresAt: z.date().optional(),
  usageLimit: z.coerce.number().int().positive(t('usageLimit.positive')).optional(),
}).refine(data => {
    if (data.discountType === 'percentage' && data.discountValue > 100) {
        return false;
    }
    return true;
}, {
    message: t('discountValue.percentageMax'),
    path: ["discountValue"],
});

export type CreateMarketplaceCouponValues = z.infer<ReturnType<typeof getCreateMarketplaceCouponSchema>>;

export const financialApplicationSchema = z.object({
    fiId: z.string({ required_error: "You must select a financial institution." }),
    type: z.enum(['Loan', 'Grant'], { required_error: "Please select an application type." }),
    amount: z.coerce.number().positive("Amount must be a positive number."),
    currency: z.string().length(3, "Currency must be a 3-letter code.").default("USD"),
    purpose: z.string().min(20, "Purpose must be at least 20 characters.").max(2000),
});
export type FinancialApplicationValues = z.infer<typeof financialApplicationSchema>;

export const createFinancialProductSchema = z.object({
  name: z.string().min(5, "Product name must be at least 5 characters.").max(100),
  type: z.enum(['Loan', 'Grant'], { required_error: "Please select a product type." }),
  description: z.string().min(20, "Description must be at least 20 characters.").max(1000),
  interestRate: z.coerce.number().min(0).optional(),
  maxAmount: z.coerce.number().positive().optional(),
  targetRoles: z.array(z.string()).optional(),
});
export type CreateFinancialProductValues = z.infer<typeof createFinancialProductSchema>;

export const createInsuranceProductSchema = z.object({
  name: z.string().min(5, "Product name must be at least 5 characters.").max(100),
  type: z.enum(['Crop', 'Livestock', 'Asset', 'Weather'], { required_error: "Please select a product type." }),
  description: z.string().min(20, "Description must be at least 20 characters.").max(1000),
  coverageDetails: z.string().min(20, "Coverage details must be at least 20 characters.").max(5000),
  premium: z.coerce.number().positive("Premium must be a positive number."),
  currency: z.string().length(3, "Currency must be a 3-letter code.").default("USD"),
});
export type CreateInsuranceProductValues = z.infer<typeof createInsuranceProductSchema>;
